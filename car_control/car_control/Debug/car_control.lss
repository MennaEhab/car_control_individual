
car_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b3a  00000bce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800062  00800062  00000bd0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029a4  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d81  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000106f  00000000  00000000  000045d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  00005648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df3  00000000  00000000  00005cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015e9  00000000  00000000  00006aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000080d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_3>
  10:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_4>
  14:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_10>
  2c:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  8a:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MotorDC_Init>:

void MotorDC_Speed_PollingWithT2(uint8_t u8_motor_speed)
{
	// speed is the duty cycle 0 -> 100
	
	timer0SwPWM_new(u8_motor_speed,freq1k);
  92:	88 23       	and	r24, r24
  94:	19 f0       	breq	.+6      	; 0x9c <MotorDC_Init+0xa>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	01 f1       	breq	.+64     	; 0xda <MotorDC_Init+0x48>
  9a:	08 95       	ret
  9c:	4f ef       	ldi	r20, 0xFF	; 255
  9e:	64 e0       	ldi	r22, 0x04	; 4
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	68 e0       	ldi	r22, 0x08	; 8
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  b0:	4f ef       	ldi	r20, 0xFF	; 255
  b2:	60 e1       	ldi	r22, 0x10	; 16
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	68 e0       	ldi	r22, 0x08	; 8
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	60 e1       	ldi	r22, 0x10	; 16
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
  d8:	08 95       	ret
  da:	4f ef       	ldi	r20, 0xFF	; 255
  dc:	60 e4       	ldi	r22, 0x40	; 64
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  e4:	4f ef       	ldi	r20, 0xFF	; 255
  e6:	60 e8       	ldi	r22, 0x80	; 128
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  ee:	4f ef       	ldi	r20, 0xFF	; 255
  f0:	60 e2       	ldi	r22, 0x20	; 32
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	60 e4       	ldi	r22, 0x40	; 64
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	60 e8       	ldi	r22, 0x80	; 128
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	60 e2       	ldi	r22, 0x20	; 32
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 116:	08 95       	ret

00000118 <MotorDC_Dir>:
 118:	88 23       	and	r24, r24
 11a:	19 f0       	breq	.+6      	; 0x122 <MotorDC_Dir+0xa>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	41 f1       	breq	.+80     	; 0x170 <MotorDC_Dir+0x58>
 120:	08 95       	ret
 122:	61 30       	cpi	r22, 0x01	; 1
 124:	21 f0       	breq	.+8      	; 0x12e <MotorDC_Dir+0x16>
 126:	c8 f0       	brcs	.+50     	; 0x15a <MotorDC_Dir+0x42>
 128:	62 30       	cpi	r22, 0x02	; 2
 12a:	61 f0       	breq	.+24     	; 0x144 <MotorDC_Dir+0x2c>
 12c:	08 95       	ret
 12e:	4f ef       	ldi	r20, 0xFF	; 255
 130:	64 e0       	ldi	r22, 0x04	; 4
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	68 e0       	ldi	r22, 0x08	; 8
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 142:	08 95       	ret
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	64 e0       	ldi	r22, 0x04	; 4
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 14e:	4f ef       	ldi	r20, 0xFF	; 255
 150:	68 e0       	ldi	r22, 0x08	; 8
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 158:	08 95       	ret
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	64 e0       	ldi	r22, 0x04	; 4
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	68 e0       	ldi	r22, 0x08	; 8
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 16e:	08 95       	ret
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	21 f0       	breq	.+8      	; 0x17c <MotorDC_Dir+0x64>
 174:	c8 f0       	brcs	.+50     	; 0x1a8 <MotorDC_Dir+0x90>
 176:	62 30       	cpi	r22, 0x02	; 2
 178:	61 f0       	breq	.+24     	; 0x192 <MotorDC_Dir+0x7a>
 17a:	08 95       	ret
 17c:	4f ef       	ldi	r20, 0xFF	; 255
 17e:	60 e4       	ldi	r22, 0x40	; 64
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	60 e8       	ldi	r22, 0x80	; 128
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 190:	08 95       	ret
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	60 e4       	ldi	r22, 0x40	; 64
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 19c:	4f ef       	ldi	r20, 0xFF	; 255
 19e:	60 e8       	ldi	r22, 0x80	; 128
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 1a6:	08 95       	ret
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	60 e4       	ldi	r22, 0x40	; 64
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	60 e8       	ldi	r22, 0x80	; 128
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 1bc:	08 95       	ret

000001be <MotorDC_Speed_HwPWM>:
	
}

void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24
	// intialize bits of OCRA , OCRB 
	gpioPinDirection(GPIOD,BIT5 , OUTPUT);
 1c2:	4f ef       	ldi	r20, 0xFF	; 255
 1c4:	60 e2       	ldi	r22, 0x20	; 32
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
	gpioPinDirection(GPIOD ,BIT4 , OUTPUT);
 1cc:	4f ef       	ldi	r20, 0xFF	; 255
 1ce:	60 e1       	ldi	r22, 0x10	; 16
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
	
	HwPWMSetDuty(u8_motor_speed , 100) ;
 1d6:	64 e6       	ldi	r22, 0x64	; 100
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	8c 2f       	mov	r24, r28
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 a1 01 	call	0x342	; 0x342 <HwPWMSetDuty>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
	
	// HIGH -> output .. OR
	if (u8_direction == HIGH ){
 1e6:	4f 3f       	cpi	r20, 0xFF	; 255
 1e8:	c1 f4       	brne	.+48     	; 0x21a <gpioPinDirection+0x34>
	switch(u8_port)
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	51 f0       	breq	.+20     	; 0x202 <gpioPinDirection+0x1c>
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <gpioPinDirection+0x14>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	59 f0       	breq	.+22     	; 0x20a <gpioPinDirection+0x24>
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	69 f0       	breq	.+26     	; 0x212 <gpioPinDirection+0x2c>
 1f8:	08 95       	ret
	{
		case GPIOA : 
		
		PORTA_DIR = PORTA_DIR | u8_pins ;
 1fa:	8a b3       	in	r24, 0x1a	; 26
 1fc:	68 2b       	or	r22, r24
 1fe:	6a bb       	out	0x1a, r22	; 26
			break;
 200:	08 95       	ret
			
		case GPIOB : 
		 
		PORTB_DIR = PORTB_DIR | u8_pins ;
 202:	87 b3       	in	r24, 0x17	; 23
 204:	68 2b       	or	r22, r24
 206:	67 bb       	out	0x17, r22	; 23
			break;
 208:	08 95       	ret
			
		case GPIOC : 
				 
		PORTC_DIR = PORTC_DIR | u8_pins ;
 20a:	84 b3       	in	r24, 0x14	; 20
 20c:	68 2b       	or	r22, r24
 20e:	64 bb       	out	0x14, r22	; 20
			break;
 210:	08 95       	ret

		case GPIOD : 
				 
		PORTD_DIR = PORTD_DIR | u8_pins ;
 212:	81 b3       	in	r24, 0x11	; 17
 214:	68 2b       	or	r22, r24
 216:	61 bb       	out	0x11, r22	; 17
			break;
 218:	08 95       	ret

	}
	}else {
		switch(u8_port) {
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	59 f0       	breq	.+22     	; 0x234 <gpioPinDirection+0x4e>
 21e:	28 f0       	brcs	.+10     	; 0x22a <gpioPinDirection+0x44>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	69 f0       	breq	.+26     	; 0x23e <gpioPinDirection+0x58>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	81 f0       	breq	.+32     	; 0x248 <gpioPinDirection+0x62>
 228:	08 95       	ret
		case GPIOA :
		
		PORTA_DIR = PORTA_DIR & ~(u8_pins) ;
 22a:	8a b3       	in	r24, 0x1a	; 26
 22c:	60 95       	com	r22
 22e:	68 23       	and	r22, r24
 230:	6a bb       	out	0x1a, r22	; 26
		break;
 232:	08 95       	ret
		
		case GPIOB :
		
		PORTB_DIR = PORTB_DIR & ~(u8_pins) ;
 234:	87 b3       	in	r24, 0x17	; 23
 236:	60 95       	com	r22
 238:	68 23       	and	r22, r24
 23a:	67 bb       	out	0x17, r22	; 23
		break;
 23c:	08 95       	ret
		
		case GPIOC :
		
		PORTC_DIR = PORTC_DIR & ~(u8_pins) ;
 23e:	84 b3       	in	r24, 0x14	; 20
 240:	60 95       	com	r22
 242:	68 23       	and	r22, r24
 244:	64 bb       	out	0x14, r22	; 20
		break;
 246:	08 95       	ret

		case GPIOD :
		
		PORTD_DIR = PORTD_DIR & ~(u8_pins) ;
 248:	81 b3       	in	r24, 0x11	; 17
 24a:	60 95       	com	r22
 24c:	68 23       	and	r22, r24
 24e:	61 bb       	out	0x11, r22	; 17
 250:	08 95       	ret

00000252 <gpioPinWrite>:
		break;
		
	} */
	  
	 uint8_t temp ;
	 switch (u8_port) {
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	71 f0       	breq	.+28     	; 0x272 <gpioPinWrite+0x20>
 256:	28 f0       	brcs	.+10     	; 0x262 <gpioPinWrite+0x10>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	99 f0       	breq	.+38     	; 0x282 <gpioPinWrite+0x30>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	c9 f0       	breq	.+50     	; 0x292 <gpioPinWrite+0x40>
 260:	08 95       	ret
	 case GPIOA : 
	 temp =  PORTA_DATA  & ~(u8_pins) ;
 262:	8b b3       	in	r24, 0x1b	; 27
	 PORTA_DATA = temp |(u8_value&u8_pins) ;
 264:	96 2f       	mov	r25, r22
 266:	90 95       	com	r25
 268:	89 23       	and	r24, r25
 26a:	46 23       	and	r20, r22
 26c:	48 2b       	or	r20, r24
 26e:	4b bb       	out	0x1b, r20	; 27
	 break;
 270:	08 95       	ret
	 case GPIOB : 
	 temp =  PORTB_DATA  & ~(u8_pins) ;
 272:	88 b3       	in	r24, 0x18	; 24
	 PORTB_DATA = temp |(u8_value&u8_pins) ;
 274:	96 2f       	mov	r25, r22
 276:	90 95       	com	r25
 278:	89 23       	and	r24, r25
 27a:	46 23       	and	r20, r22
 27c:	48 2b       	or	r20, r24
 27e:	48 bb       	out	0x18, r20	; 24
	 break;
 280:	08 95       	ret
	 case GPIOC :
	 temp =  PORTC_DATA  & ~(u8_pins) ;
 282:	85 b3       	in	r24, 0x15	; 21
	 PORTC_DATA = temp |(u8_value&u8_pins) ;
 284:	96 2f       	mov	r25, r22
 286:	90 95       	com	r25
 288:	89 23       	and	r24, r25
 28a:	46 23       	and	r20, r22
 28c:	48 2b       	or	r20, r24
 28e:	45 bb       	out	0x15, r20	; 21
	 break;
 290:	08 95       	ret
	 case GPIOD :
	 temp =  PORTD_DATA  & ~(u8_pins) ;
 292:	82 b3       	in	r24, 0x12	; 18
	 PORTD_DATA = temp |(u8_value&u8_pins) ;
 294:	96 2f       	mov	r25, r22
 296:	90 95       	com	r25
 298:	89 23       	and	r24, r25
 29a:	46 23       	and	r20, r22
 29c:	48 2b       	or	r20, r24
 29e:	42 bb       	out	0x12, r20	; 18
 2a0:	08 95       	ret

000002a2 <HwPWMInit>:
#define PWM_PRE_SCALE 64
#define PWM_PRE_scale_MASK T1_PRESCALER_1024
uint8_t global_duty = 0;
uint8_t global_req_freq = 0;

void HwPWMInit(void){
 2a2:	af 92       	push	r10
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
	
uint16_t ICR_TOP ;
uint16_t duty_cycle_tick ;


ICR_TOP = F_CPU / (2.0 * PWM_PRE_SCALE * global_req_freq) ;
 2b0:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 93 04 	call	0x926	; 0x926 <__floatsisf>
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	53 e4       	ldi	r21, 0x43	; 67
 2c6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__mulsf3>
 2ca:	9b 01       	movw	r18, r22
 2cc:	ac 01       	movw	r20, r24
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	74 e2       	ldi	r23, 0x24	; 36
 2d2:	84 e7       	ldi	r24, 0x74	; 116
 2d4:	9b e4       	ldi	r25, 0x4B	; 75
 2d6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__divsf3>
 2da:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fixunssfsi>
 2de:	6b 01       	movw	r12, r22
 2e0:	7c 01       	movw	r14, r24


//ICR_TOP = 0x004E;

duty_cycle_tick = ICR_TOP *global_duty/100.0 ;
 2e2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <global_duty>
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	8c 9d       	mul	r24, r12
 2ea:	b0 01       	movw	r22, r0
 2ec:	8d 9d       	mul	r24, r13
 2ee:	70 0d       	add	r23, r0
 2f0:	9c 9d       	mul	r25, r12
 2f2:	70 0d       	add	r23, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 91 04 	call	0x922	; 0x922 <__floatunsisf>
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	48 ec       	ldi	r20, 0xC8	; 200
 304:	52 e4       	ldi	r21, 0x42	; 66
 306:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__divsf3>
 30a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fixunssfsi>
timer1Init(T1_PHASE_CORRECT_ICR1, T1_OC1A_CLEAR|T1_OC1B_CLEAR , 
 30e:	a1 2c       	mov	r10, r1
 310:	7b 01       	movw	r14, r22
 312:	8b 01       	movw	r16, r22
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	45 e0       	ldi	r20, 0x05	; 5
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 ea       	ldi	r23, 0xA0	; 160
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	92 e0       	ldi	r25, 0x02	; 2
 324:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <timer1Init>
			PWM_PRE_scale_MASK , 0 , duty_cycle_tick, duty_cycle_tick,ICR_TOP, T1_POLLING);	
	TCCR1 |= 0x0005;
 328:	8e b5       	in	r24, 0x2e	; 46
 32a:	9f b5       	in	r25, 0x2f	; 47
 32c:	85 60       	ori	r24, 0x05	; 5
 32e:	9f bd       	out	0x2f, r25	; 47
 330:	8e bd       	out	0x2e, r24	; 46
	
	//timer1Start();
}
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	af 90       	pop	r10
 340:	08 95       	ret

00000342 <HwPWMSetDuty>:


void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency){
	
	global_duty = a_u8_duty ;
 342:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <global_duty>
	global_req_freq = a_u32_frequency ;
 346:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__data_end>
	HwPWMInit();
 34a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <HwPWMInit>
 34e:	08 95       	ret

00000350 <Led_Init>:
 */ 
#include "led.h"

void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	61 f0       	breq	.+24     	; 0x36c <Led_Init+0x1c>
 354:	28 f0       	brcs	.+10     	; 0x360 <Led_Init+0x10>
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	79 f0       	breq	.+30     	; 0x378 <Led_Init+0x28>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	99 f0       	breq	.+38     	; 0x384 <Led_Init+0x34>
 35e:	08 95       	ret
	{
		case LED_0 : 
			gpioPinDirection(LED_0_GPIO , LED_0_BIT , OUTPUT);
 360:	4f ef       	ldi	r20, 0xFF	; 255
 362:	60 e1       	ldi	r22, 0x10	; 16
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
			break;
 36a:	08 95       	ret
		case LED_1 :
			gpioPinDirection(LED_1_GPIO , LED_1_BIT , OUTPUT);
 36c:	4f ef       	ldi	r20, 0xFF	; 255
 36e:	60 e2       	ldi	r22, 0x20	; 32
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
			break;
 376:	08 95       	ret
		case LED_2 :
			gpioPinDirection(LED_2_GPIO , LED_2_BIT , OUTPUT);
 378:	4f ef       	ldi	r20, 0xFF	; 255
 37a:	60 e4       	ldi	r22, 0x40	; 64
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
			break;
 382:	08 95       	ret
		case LED_3 :
			gpioPinDirection(LED_3_GPIO , LED_3_BIT , OUTPUT);
 384:	4f ef       	ldi	r20, 0xFF	; 255
 386:	60 e8       	ldi	r22, 0x80	; 128
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
 38e:	08 95       	ret

00000390 <main>:

int main(void)
{
	//////////// icu ////////////////////
	///// enable global interrupt 
	SREG |=0x80;
 390:	8f b7       	in	r24, 0x3f	; 63
 392:	80 68       	ori	r24, 0x80	; 128
 394:	8f bf       	out	0x3f, r24	; 63
		/////external interrupt1 pin 
	gpioPinDirection(GPIOB , BIT2 , INPUT );
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	64 e0       	ldi	r22, 0x04	; 4
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
	
	///for protus 
	gpioPinWrite(GPIOB,BIT2,HIGH);
 3a0:	4f ef       	ldi	r20, 0xFF	; 255
 3a2:	64 e0       	ldi	r22, 0x04	; 4
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	
	Led_Init(LED_0);
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 a8 01 	call	0x350	; 0x350 <Led_Init>
	Led_Init(LED_1);
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 a8 01 	call	0x350	; 0x350 <Led_Init>
	Led_Init(LED_2);
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	0e 94 a8 01 	call	0x350	; 0x350 <Led_Init>
	Led_Init(LED_3);
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	0e 94 a8 01 	call	0x350	; 0x350 <Led_Init>
	
	
	SwICU_Init(SwICU_EdgeRisiging);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 01 02 	call	0x402	; 0x402 <SwICU_Init>
	
	/// direction of trigger
	
	gpioPinDirection(GPIOC , BIT0 ,OUTPUT);
 3c8:	4f ef       	ldi	r20, 0xFF	; 255
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
	
	timer2DelayMs(20);
 3d2:	84 e1       	ldi	r24, 0x14	; 20
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 24 03 	call	0x648	; 0x648 <timer2DelayMs>
	
	//////////motor///////////////
	
	MotorDC_Init(MOT_1);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 49 00 	call	0x92	; 0x92 <MotorDC_Init>
	MotorDC_Init(MOT_2);
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 49 00 	call	0x92	; 0x92 <MotorDC_Init>
	
	MotorDC_Dir(MOT_1,FORWARD);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 8c 00 	call	0x118	; 0x118 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,FORWARD);
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 8c 00 	call	0x118	; 0x118 <MotorDC_Dir>
	
	//MotorDC_Speed_HwPWM(20);
	MotorDC_Speed_HwPWM(50) ;
 3f6:	82 e3       	ldi	r24, 0x32	; 50
 3f8:	0e 94 df 00 	call	0x1be	; 0x1be <MotorDC_Speed_HwPWM>
    /* Replace with your application code */
    while (1) 
    {
		ultrasonic_init ();
 3fc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ultrasonic_init>
 400:	fd cf       	rjmp	.-6      	; 0x3fc <main+0x6c>

00000402 <SwICU_Init>:
void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdgeedge){
	
	if(a_en_inputCaptureEdgeedge== SwICU_EdgeRisiging)
		SET_BIT(INT2_EDGE_GPIO , INT2_EN_BIT);
	else
		CLEAR_BIT(INT2_EDGE_GPIO , INT2_EN_BIT);
 402:	ef 92       	push	r14
 404:	0f 93       	push	r16
 406:	cf 93       	push	r28
 408:	c8 2f       	mov	r28, r24
 40a:	e1 2c       	mov	r14, r1
 40c:	00 e0       	ldi	r16, 0x00	; 0
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	44 e0       	ldi	r20, 0x04	; 4
 412:	60 e3       	ldi	r22, 0x30	; 48
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 65 02 	call	0x4ca	; 0x4ca <timer0Init>
 41a:	c1 30       	cpi	r28, 0x01	; 1
 41c:	21 f4       	brne	.+8      	; 0x426 <SwICU_Init+0x24>
 41e:	84 b7       	in	r24, 0x34	; 52
 420:	80 64       	ori	r24, 0x40	; 64
 422:	84 bf       	out	0x34, r24	; 52
 424:	03 c0       	rjmp	.+6      	; 0x42c <SwICU_Init+0x2a>
 426:	84 b7       	in	r24, 0x34	; 52
 428:	8f 7b       	andi	r24, 0xBF	; 191
 42a:	84 bf       	out	0x34, r24	; 52
 42c:	8b b7       	in	r24, 0x3b	; 59
 42e:	80 62       	ori	r24, 0x20	; 32
 430:	8b bf       	out	0x3b, r24	; 59
 432:	cf 91       	pop	r28
 434:	0f 91       	pop	r16
 436:	ef 90       	pop	r14
 438:	08 95       	ret

0000043a <SwICU_Read>:

//read th TCNT

void SwICU_Read(volatile uint8_t * a_pu8_capt){
	
	*(a_pu8_capt) = TCNT_value ;
 43a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <TCNT_value>
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
 442:	08 95       	ret

00000444 <SwICU_Stop>:
}

//stop timer

void SwICU_Stop(void){
	timer0Stop() ;
 444:	0e 94 7f 02 	call	0x4fe	; 0x4fe <timer0Stop>
	TCNT_value = timer0Read() ;
 448:	0e 94 77 02 	call	0x4ee	; 0x4ee <timer0Read>
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <TCNT_value+0x1>
 452:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TCNT_value>
	TCNT0 = 0 ;
 456:	12 be       	out	0x32, r1	; 50
 458:	08 95       	ret

0000045a <__vector_3>:

static uint16_t TCNT_value = 0 ;



ISR(INT2_vect){
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	4f 93       	push	r20
 46a:	5f 93       	push	r21
 46c:	6f 93       	push	r22
 46e:	7f 93       	push	r23
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	af 93       	push	r26
 476:	bf 93       	push	r27
 478:	ef 93       	push	r30
 47a:	ff 93       	push	r31
	//Led_Init(LED_1);
	//Led_On(LED_1);
	switch (flag){
 47c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 480:	88 23       	and	r24, r24
 482:	51 f0       	breq	.+20     	; 0x498 <__vector_3+0x3e>
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	81 f4       	brne	.+32     	; 0x4a8 <__vector_3+0x4e>
	
}

//
void SwICU_Start(void){
	timer0Start() ;
 488:	0e 94 79 02 	call	0x4f2	; 0x4f2 <timer0Start>
	switch (flag){
		
		case SwICU_EdgeRisiging :
		
		SwICU_Start();
		MCUCSR &= ~(1<<6) ;
 48c:	84 b7       	in	r24, 0x34	; 52
 48e:	8f 7b       	andi	r24, 0xBF	; 191
 490:	84 bf       	out	0x34, r24	; 52
		//Led_On(LED_0) ;
		flag = SwICU_EdgeFalling;
 492:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
 496:	08 c0       	rjmp	.+16     	; 0x4a8 <__vector_3+0x4e>
		
		case SwICU_EdgeFalling :
		
		SwICU_Stop();
 498:	0e 94 22 02 	call	0x444	; 0x444 <SwICU_Stop>
		MCUCSR |= 1<<6 ;
 49c:	84 b7       	in	r24, 0x34	; 52
 49e:	80 64       	ori	r24, 0x40	; 64
 4a0:	84 bf       	out	0x34, r24	; 52
		//Led_Off(LED_0) ;
		flag = SwICU_EdgeRisiging;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
		
	}
	
	
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <timer0Init>:
	sei();
	timer2Start();
	gpioPinWrite(T2_PWM_GPIO1 , T2_PWM_BIT1 , HIGH);
	gpioPinWrite(T2_PWM_GPIO2 , T2_PWM_BIT2 , HIGH);
	
}
 4ca:	ef 92       	push	r14
 4cc:	0f 93       	push	r16
 4ce:	13 be       	out	0x33, r1	; 51
 4d0:	86 2b       	or	r24, r22
 4d2:	83 bf       	out	0x33, r24	; 51
 4d4:	22 bf       	out	0x32, r18	; 50
 4d6:	0c bf       	out	0x3c, r16	; 60
 4d8:	89 b7       	in	r24, 0x39	; 57
 4da:	e8 2a       	or	r14, r24
 4dc:	e9 be       	out	0x39, r14	; 57
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	50 93 68 00 	sts	0x0068, r21	; 0x800068 <global_prescale+0x1>
 4e4:	40 93 67 00 	sts	0x0067, r20	; 0x800067 <global_prescale>
 4e8:	0f 91       	pop	r16
 4ea:	ef 90       	pop	r14
 4ec:	08 95       	ret

000004ee <timer0Read>:
 4ee:	82 b7       	in	r24, 0x32	; 50
 4f0:	08 95       	ret

000004f2 <timer0Start>:
 4f2:	93 b7       	in	r25, 0x33	; 51
 4f4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <global_prescale>
 4f8:	89 2b       	or	r24, r25
 4fa:	83 bf       	out	0x33, r24	; 51
 4fc:	08 95       	ret

000004fe <timer0Stop>:
 4fe:	83 b7       	in	r24, 0x33	; 51
 500:	88 7f       	andi	r24, 0xF8	; 248
 502:	83 bf       	out	0x33, r24	; 51
 504:	08 95       	ret

00000506 <__vector_10>:
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	3f 93       	push	r19
 514:	4f 93       	push	r20
 516:	5f 93       	push	r21
 518:	6f 93       	push	r22
 51a:	7f 93       	push	r23
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
 520:	af 93       	push	r26
 522:	bf 93       	push	r27
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
 528:	4f ef       	ldi	r20, 0xFF	; 255
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	bf 91       	pop	r27
 538:	af 91       	pop	r26
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	7f 91       	pop	r23
 540:	6f 91       	pop	r22
 542:	5f 91       	pop	r21
 544:	4f 91       	pop	r20
 546:	3f 91       	pop	r19
 548:	2f 91       	pop	r18
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <__vector_11>:
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
 576:	40 e0       	ldi	r20, 0x00	; 0
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 580:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <global_T0frequency>
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	39 f0       	breq	.+14     	; 0x596 <__vector_11+0x42>
 588:	18 f0       	brcs	.+6      	; 0x590 <__vector_11+0x3c>
 58a:	82 30       	cpi	r24, 0x02	; 2
 58c:	39 f0       	breq	.+14     	; 0x59c <__vector_11+0x48>
 58e:	08 c0       	rjmp	.+16     	; 0x5a0 <__vector_11+0x4c>
 590:	85 e0       	ldi	r24, 0x05	; 5
 592:	82 bf       	out	0x32, r24	; 50
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <__vector_11+0x4c>
 596:	83 e8       	ldi	r24, 0x83	; 131
 598:	82 bf       	out	0x32, r24	; 50
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__vector_11+0x4c>
 59c:	83 e8       	ldi	r24, 0x83	; 131
 59e:	82 bf       	out	0x32, r24	; 50
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	7f 91       	pop	r23
 5ae:	6f 91       	pop	r22
 5b0:	5f 91       	pop	r21
 5b2:	4f 91       	pop	r20
 5b4:	3f 91       	pop	r19
 5b6:	2f 91       	pop	r18
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <timer1Init>:
 5c2:	af 92       	push	r10
 5c4:	cf 92       	push	r12
 5c6:	df 92       	push	r13
 5c8:	ef 92       	push	r14
 5ca:	ff 92       	push	r15
 5cc:	0f 93       	push	r16
 5ce:	1f 93       	push	r17
 5d0:	1f bc       	out	0x2f, r1	; 47
 5d2:	1e bc       	out	0x2e, r1	; 46
 5d4:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <global_prescale1+0x1>
 5d8:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <global_prescale1>
 5dc:	86 2b       	or	r24, r22
 5de:	97 2b       	or	r25, r23
 5e0:	9f bd       	out	0x2f, r25	; 47
 5e2:	8e bd       	out	0x2e, r24	; 46
 5e4:	d7 bc       	out	0x27, r13	; 39
 5e6:	c6 bc       	out	0x26, r12	; 38
 5e8:	3d bd       	out	0x2d, r19	; 45
 5ea:	2c bd       	out	0x2c, r18	; 44
 5ec:	1b bd       	out	0x2b, r17	; 43
 5ee:	0a bd       	out	0x2a, r16	; 42
 5f0:	f9 bc       	out	0x29, r15	; 41
 5f2:	e8 bc       	out	0x28, r14	; 40
 5f4:	89 b7       	in	r24, 0x39	; 57
 5f6:	a8 2a       	or	r10, r24
 5f8:	a9 be       	out	0x39, r10	; 57
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	ff 90       	pop	r15
 600:	ef 90       	pop	r14
 602:	df 90       	pop	r13
 604:	cf 90       	pop	r12
 606:	af 90       	pop	r10
 608:	08 95       	ret

0000060a <timer2Init>:
 60a:	cf 92       	push	r12
 60c:	0f 93       	push	r16
 60e:	92 b5       	in	r25, 0x22	; 34
 610:	90 7f       	andi	r25, 0xF0	; 240
 612:	92 bd       	out	0x22, r25	; 34
 614:	15 bc       	out	0x25, r1	; 37
 616:	86 2b       	or	r24, r22
 618:	85 bd       	out	0x25, r24	; 37
 61a:	24 bd       	out	0x24, r18	; 36
 61c:	03 bd       	out	0x23, r16	; 35
 61e:	89 b7       	in	r24, 0x39	; 57
 620:	c8 2a       	or	r12, r24
 622:	c9 be       	out	0x39, r12	; 57
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	50 93 72 00 	sts	0x0072, r21	; 0x800072 <global_prescale2+0x1>
 62a:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <global_prescale2>
 62e:	0f 91       	pop	r16
 630:	cf 90       	pop	r12
 632:	08 95       	ret

00000634 <timer2Start>:
 634:	95 b5       	in	r25, 0x25	; 37
 636:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <global_prescale2>
 63a:	89 2b       	or	r24, r25
 63c:	85 bd       	out	0x25, r24	; 37
 63e:	08 95       	ret

00000640 <timer2Stop>:
 640:	83 b7       	in	r24, 0x33	; 51
 642:	88 7f       	andi	r24, 0xF8	; 248
 644:	83 bf       	out	0x33, r24	; 51
 646:	08 95       	ret

00000648 <timer2DelayMs>:
 648:	cf 92       	push	r12
 64a:	ef 92       	push	r14
 64c:	0f 93       	push	r16
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	ec 01       	movw	r28, r24
 654:	c1 2c       	mov	r12, r1
 656:	e1 2c       	mov	r14, r1
 658:	0a ef       	ldi	r16, 0xFA	; 250
 65a:	20 e0       	ldi	r18, 0x00	; 0
 65c:	44 e0       	ldi	r20, 0x04	; 4
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	88 e0       	ldi	r24, 0x08	; 8
 662:	0e 94 05 03 	call	0x60a	; 0x60a <timer2Init>
 666:	8c e0       	ldi	r24, 0x0C	; 12
 668:	84 bd       	out	0x24, r24	; 36
 66a:	0e 94 1a 03 	call	0x634	; 0x634 <timer2Start>
 66e:	08 c0       	rjmp	.+16     	; 0x680 <timer2DelayMs+0x38>
 670:	08 b6       	in	r0, 0x38	; 56
 672:	07 fe       	sbrs	r0, 7
 674:	fd cf       	rjmp	.-6      	; 0x670 <timer2DelayMs+0x28>
 676:	21 97       	sbiw	r28, 0x01	; 1
 678:	14 bc       	out	0x24, r1	; 36
 67a:	88 b7       	in	r24, 0x38	; 56
 67c:	80 68       	ori	r24, 0x80	; 128
 67e:	88 bf       	out	0x38, r24	; 56
 680:	20 97       	sbiw	r28, 0x00	; 0
 682:	21 f0       	breq	.+8      	; 0x68c <timer2DelayMs+0x44>
 684:	08 b6       	in	r0, 0x38	; 56
 686:	07 fe       	sbrs	r0, 7
 688:	f3 cf       	rjmp	.-26     	; 0x670 <timer2DelayMs+0x28>
 68a:	f5 cf       	rjmp	.-22     	; 0x676 <timer2DelayMs+0x2e>
 68c:	0e 94 20 03 	call	0x640	; 0x640 <timer2Stop>
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	0f 91       	pop	r16
 696:	ef 90       	pop	r14
 698:	cf 90       	pop	r12
 69a:	08 95       	ret

0000069c <__vector_4>:

ISR(TIMER2_COMP_vect){
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	2f 93       	push	r18
 6a8:	3f 93       	push	r19
 6aa:	4f 93       	push	r20
 6ac:	5f 93       	push	r21
 6ae:	6f 93       	push	r22
 6b0:	7f 93       	push	r23
 6b2:	8f 93       	push	r24
 6b4:	9f 93       	push	r25
 6b6:	af 93       	push	r26
 6b8:	bf 93       	push	r27
 6ba:	ef 93       	push	r30
 6bc:	ff 93       	push	r31
		gpioPinToggle( T0_PWM_GPIO , T0_PWM_BIT  );
		break;
	}
	timer0Start(); */

gpioPinWrite( T2_PWM_GPIO1 , T2_PWM_BIT1 ,HIGH);
 6be:	4f ef       	ldi	r20, 0xFF	; 255
 6c0:	60 e1       	ldi	r22, 0x10	; 16
 6c2:	83 e0       	ldi	r24, 0x03	; 3
 6c4:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
gpioPinWrite( T2_PWM_GPIO2 , T2_PWM_BIT2 ,HIGH);
 6c8:	4f ef       	ldi	r20, 0xFF	; 255
 6ca:	60 e2       	ldi	r22, 0x20	; 32
 6cc:	83 e0       	ldi	r24, 0x03	; 3
 6ce:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
}
 6d2:	ff 91       	pop	r31
 6d4:	ef 91       	pop	r30
 6d6:	bf 91       	pop	r27
 6d8:	af 91       	pop	r26
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	7f 91       	pop	r23
 6e0:	6f 91       	pop	r22
 6e2:	5f 91       	pop	r21
 6e4:	4f 91       	pop	r20
 6e6:	3f 91       	pop	r19
 6e8:	2f 91       	pop	r18
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <__vector_5>:

ISR(TIMER2_OVF_vect){
 6f4:	1f 92       	push	r1
 6f6:	0f 92       	push	r0
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	0f 92       	push	r0
 6fc:	11 24       	eor	r1, r1
 6fe:	2f 93       	push	r18
 700:	3f 93       	push	r19
 702:	4f 93       	push	r20
 704:	5f 93       	push	r21
 706:	6f 93       	push	r22
 708:	7f 93       	push	r23
 70a:	8f 93       	push	r24
 70c:	9f 93       	push	r25
 70e:	af 93       	push	r26
 710:	bf 93       	push	r27
 712:	ef 93       	push	r30
 714:	ff 93       	push	r31
	gpioPinWrite( T2_PWM_GPIO1 , T2_PWM_BIT1 ,LOW);
 716:	40 e0       	ldi	r20, 0x00	; 0
 718:	60 e1       	ldi	r22, 0x10	; 16
 71a:	83 e0       	ldi	r24, 0x03	; 3
 71c:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	gpioPinWrite( T2_PWM_GPIO2 , T2_PWM_BIT2 ,LOW);	
 720:	40 e0       	ldi	r20, 0x00	; 0
 722:	60 e2       	ldi	r22, 0x20	; 32
 724:	83 e0       	ldi	r24, 0x03	; 3
 726:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	switch (global_T0frequency){
 72a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <global_T0frequency>
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	39 f0       	breq	.+14     	; 0x740 <__vector_5+0x4c>
 732:	18 f0       	brcs	.+6      	; 0x73a <__vector_5+0x46>
 734:	82 30       	cpi	r24, 0x02	; 2
 736:	39 f0       	breq	.+14     	; 0x746 <__vector_5+0x52>
 738:	08 c0       	rjmp	.+16     	; 0x74a <__vector_5+0x56>
		case freq1k : TCNT0 = 5 ;
 73a:	85 e0       	ldi	r24, 0x05	; 5
 73c:	82 bf       	out	0x32, r24	; 50
				break;
 73e:	05 c0       	rjmp	.+10     	; 0x74a <__vector_5+0x56>
		case freq2k : TCNT0 = 131 ;
 740:	83 e8       	ldi	r24, 0x83	; 131
 742:	82 bf       	out	0x32, r24	; 50
				break;
 744:	02 c0       	rjmp	.+4      	; 0x74a <__vector_5+0x56>
		case  freq500 : TCNT0 = 131 ;
 746:	83 e8       	ldi	r24, 0x83	; 131
 748:	82 bf       	out	0x32, r24	; 50
				break;
		
	}
	
	
 74a:	ff 91       	pop	r31
 74c:	ef 91       	pop	r30
 74e:	bf 91       	pop	r27
 750:	af 91       	pop	r26
 752:	9f 91       	pop	r25
 754:	8f 91       	pop	r24
 756:	7f 91       	pop	r23
 758:	6f 91       	pop	r22
 75a:	5f 91       	pop	r21
 75c:	4f 91       	pop	r20
 75e:	3f 91       	pop	r19
 760:	2f 91       	pop	r18
 762:	0f 90       	pop	r0
 764:	0f be       	out	0x3f, r0	; 63
 766:	0f 90       	pop	r0
 768:	1f 90       	pop	r1
 76a:	18 95       	reti

0000076c <calculate>:
	timer2DelayMs(60);
	
	 
}

uint16_t calculate(){
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
	
	uint8_t * no_of_ticks ;
	uint16_t timerOfTicks_Us  ;
	uint16_t Distance ;
	SwICU_Read(no_of_ticks);
 770:	c0 e0       	ldi	r28, 0x00	; 0
 772:	d0 e0       	ldi	r29, 0x00	; 0
 774:	ce 01       	movw	r24, r28
 776:	0e 94 1d 02 	call	0x43a	; 0x43a <SwICU_Read>
	
	timerOfTicks_Us = *no_of_ticks * tickTimeUs ;
	
	Distance = timerOfTicks_Us/58 ;
 77a:	28 81       	ld	r18, Y
 77c:	80 e1       	ldi	r24, 0x10	; 16
 77e:	28 9f       	mul	r18, r24
 780:	90 01       	movw	r18, r0
 782:	11 24       	eor	r1, r1
 784:	af e9       	ldi	r26, 0x9F	; 159
 786:	b6 e4       	ldi	r27, 0x46	; 70
 788:	0e 94 8c 05 	call	0xb18	; 0xb18 <__umulhisi3>
 78c:	92 95       	swap	r25
 78e:	82 95       	swap	r24
 790:	8f 70       	andi	r24, 0x0F	; 15
 792:	89 27       	eor	r24, r25
 794:	9f 70       	andi	r25, 0x0F	; 15
 796:	89 27       	eor	r24, r25
	if (Distance > 15 ){
		Distance = 15 ;
	}
	//Distance = 3 ; 
	return Distance;
 798:	80 31       	cpi	r24, 0x10	; 16
 79a:	91 05       	cpc	r25, r1
 79c:	10 f0       	brcs	.+4      	; 0x7a2 <calculate+0x36>
 79e:	8f e0       	ldi	r24, 0x0F	; 15
 7a0:	90 e0       	ldi	r25, 0x00	; 0
	
	// microsec/58 = cm
	
	
	
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

000007a8 <ultrasonic_init>:

void ultrasonic_init(){
	
	uint16_t Distance ;
	//trigger
	gpioPinWrite(GPIOC , BIT0 , 1);
 7a8:	41 e0       	ldi	r20, 0x01	; 1
 7aa:	61 e0       	ldi	r22, 0x01	; 1
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	
	timer2DelayMs(5);
 7b2:	85 e0       	ldi	r24, 0x05	; 5
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 24 03 	call	0x648	; 0x648 <timer2DelayMs>
	
	gpioPinWrite(GPIOC , BIT0 , 0);
 7ba:	40 e0       	ldi	r20, 0x00	; 0
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	
	
	
	//Distance = 15 ;
	
	Distance = calculate() ;
 7c4:	0e 94 b6 03 	call	0x76c	; 0x76c <calculate>
	
	gpioPinWrite(GPIOB , BIT4|BIT5|BIT6|BIT7 , Distance<<4) ;
 7c8:	48 2f       	mov	r20, r24
 7ca:	42 95       	swap	r20
 7cc:	40 7f       	andi	r20, 0xF0	; 240
 7ce:	60 ef       	ldi	r22, 0xF0	; 240
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	
	timer2DelayMs(60);
 7d6:	8c e3       	ldi	r24, 0x3C	; 60
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 24 03 	call	0x648	; 0x648 <timer2DelayMs>
 7de:	08 95       	ret

000007e0 <__divsf3>:
 7e0:	0e 94 04 04 	call	0x808	; 0x808 <__divsf3x>
 7e4:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_round>
 7e8:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_pscB>
 7ec:	58 f0       	brcs	.+22     	; 0x804 <__divsf3+0x24>
 7ee:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fp_pscA>
 7f2:	40 f0       	brcs	.+16     	; 0x804 <__divsf3+0x24>
 7f4:	29 f4       	brne	.+10     	; 0x800 <__divsf3+0x20>
 7f6:	5f 3f       	cpi	r21, 0xFF	; 255
 7f8:	29 f0       	breq	.+10     	; 0x804 <__divsf3+0x24>
 7fa:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_inf>
 7fe:	51 11       	cpse	r21, r1
 800:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_szero>
 804:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_nan>

00000808 <__divsf3x>:
 808:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__fp_split3>
 80c:	68 f3       	brcs	.-38     	; 0x7e8 <__divsf3+0x8>

0000080e <__divsf3_pse>:
 80e:	99 23       	and	r25, r25
 810:	b1 f3       	breq	.-20     	; 0x7fe <__divsf3+0x1e>
 812:	55 23       	and	r21, r21
 814:	91 f3       	breq	.-28     	; 0x7fa <__divsf3+0x1a>
 816:	95 1b       	sub	r25, r21
 818:	55 0b       	sbc	r21, r21
 81a:	bb 27       	eor	r27, r27
 81c:	aa 27       	eor	r26, r26
 81e:	62 17       	cp	r22, r18
 820:	73 07       	cpc	r23, r19
 822:	84 07       	cpc	r24, r20
 824:	38 f0       	brcs	.+14     	; 0x834 <__divsf3_pse+0x26>
 826:	9f 5f       	subi	r25, 0xFF	; 255
 828:	5f 4f       	sbci	r21, 0xFF	; 255
 82a:	22 0f       	add	r18, r18
 82c:	33 1f       	adc	r19, r19
 82e:	44 1f       	adc	r20, r20
 830:	aa 1f       	adc	r26, r26
 832:	a9 f3       	breq	.-22     	; 0x81e <__divsf3_pse+0x10>
 834:	35 d0       	rcall	.+106    	; 0x8a0 <__stack+0x41>
 836:	0e 2e       	mov	r0, r30
 838:	3a f0       	brmi	.+14     	; 0x848 <__divsf3_pse+0x3a>
 83a:	e0 e8       	ldi	r30, 0x80	; 128
 83c:	32 d0       	rcall	.+100    	; 0x8a2 <__stack+0x43>
 83e:	91 50       	subi	r25, 0x01	; 1
 840:	50 40       	sbci	r21, 0x00	; 0
 842:	e6 95       	lsr	r30
 844:	00 1c       	adc	r0, r0
 846:	ca f7       	brpl	.-14     	; 0x83a <__divsf3_pse+0x2c>
 848:	2b d0       	rcall	.+86     	; 0x8a0 <__stack+0x41>
 84a:	fe 2f       	mov	r31, r30
 84c:	29 d0       	rcall	.+82     	; 0x8a0 <__stack+0x41>
 84e:	66 0f       	add	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	88 1f       	adc	r24, r24
 854:	bb 1f       	adc	r27, r27
 856:	26 17       	cp	r18, r22
 858:	37 07       	cpc	r19, r23
 85a:	48 07       	cpc	r20, r24
 85c:	ab 07       	cpc	r26, r27
 85e:	b0 e8       	ldi	r27, 0x80	; 128
 860:	09 f0       	breq	.+2      	; 0x864 <__stack+0x5>
 862:	bb 0b       	sbc	r27, r27
 864:	80 2d       	mov	r24, r0
 866:	bf 01       	movw	r22, r30
 868:	ff 27       	eor	r31, r31
 86a:	93 58       	subi	r25, 0x83	; 131
 86c:	5f 4f       	sbci	r21, 0xFF	; 255
 86e:	3a f0       	brmi	.+14     	; 0x87e <__stack+0x1f>
 870:	9e 3f       	cpi	r25, 0xFE	; 254
 872:	51 05       	cpc	r21, r1
 874:	78 f0       	brcs	.+30     	; 0x894 <__stack+0x35>
 876:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_inf>
 87a:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_szero>
 87e:	5f 3f       	cpi	r21, 0xFF	; 255
 880:	e4 f3       	brlt	.-8      	; 0x87a <__stack+0x1b>
 882:	98 3e       	cpi	r25, 0xE8	; 232
 884:	d4 f3       	brlt	.-12     	; 0x87a <__stack+0x1b>
 886:	86 95       	lsr	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	b7 95       	ror	r27
 88e:	f7 95       	ror	r31
 890:	9f 5f       	subi	r25, 0xFF	; 255
 892:	c9 f7       	brne	.-14     	; 0x886 <__stack+0x27>
 894:	88 0f       	add	r24, r24
 896:	91 1d       	adc	r25, r1
 898:	96 95       	lsr	r25
 89a:	87 95       	ror	r24
 89c:	97 f9       	bld	r25, 7
 89e:	08 95       	ret
 8a0:	e1 e0       	ldi	r30, 0x01	; 1
 8a2:	66 0f       	add	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	bb 1f       	adc	r27, r27
 8aa:	62 17       	cp	r22, r18
 8ac:	73 07       	cpc	r23, r19
 8ae:	84 07       	cpc	r24, r20
 8b0:	ba 07       	cpc	r27, r26
 8b2:	20 f0       	brcs	.+8      	; 0x8bc <__stack+0x5d>
 8b4:	62 1b       	sub	r22, r18
 8b6:	73 0b       	sbc	r23, r19
 8b8:	84 0b       	sbc	r24, r20
 8ba:	ba 0b       	sbc	r27, r26
 8bc:	ee 1f       	adc	r30, r30
 8be:	88 f7       	brcc	.-30     	; 0x8a2 <__stack+0x43>
 8c0:	e0 95       	com	r30
 8c2:	08 95       	ret

000008c4 <__fixunssfsi>:
 8c4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_splitA>
 8c8:	88 f0       	brcs	.+34     	; 0x8ec <__fixunssfsi+0x28>
 8ca:	9f 57       	subi	r25, 0x7F	; 127
 8cc:	98 f0       	brcs	.+38     	; 0x8f4 <__fixunssfsi+0x30>
 8ce:	b9 2f       	mov	r27, r25
 8d0:	99 27       	eor	r25, r25
 8d2:	b7 51       	subi	r27, 0x17	; 23
 8d4:	b0 f0       	brcs	.+44     	; 0x902 <__fixunssfsi+0x3e>
 8d6:	e1 f0       	breq	.+56     	; 0x910 <__fixunssfsi+0x4c>
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	1a f0       	brmi	.+6      	; 0x8e8 <__fixunssfsi+0x24>
 8e2:	ba 95       	dec	r27
 8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__fixunssfsi+0x14>
 8e6:	14 c0       	rjmp	.+40     	; 0x910 <__fixunssfsi+0x4c>
 8e8:	b1 30       	cpi	r27, 0x01	; 1
 8ea:	91 f0       	breq	.+36     	; 0x910 <__fixunssfsi+0x4c>
 8ec:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_zero>
 8f0:	b1 e0       	ldi	r27, 0x01	; 1
 8f2:	08 95       	ret
 8f4:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_zero>
 8f8:	67 2f       	mov	r22, r23
 8fa:	78 2f       	mov	r23, r24
 8fc:	88 27       	eor	r24, r24
 8fe:	b8 5f       	subi	r27, 0xF8	; 248
 900:	39 f0       	breq	.+14     	; 0x910 <__fixunssfsi+0x4c>
 902:	b9 3f       	cpi	r27, 0xF9	; 249
 904:	cc f3       	brlt	.-14     	; 0x8f8 <__fixunssfsi+0x34>
 906:	86 95       	lsr	r24
 908:	77 95       	ror	r23
 90a:	67 95       	ror	r22
 90c:	b3 95       	inc	r27
 90e:	d9 f7       	brne	.-10     	; 0x906 <__fixunssfsi+0x42>
 910:	3e f4       	brtc	.+14     	; 0x920 <__fixunssfsi+0x5c>
 912:	90 95       	com	r25
 914:	80 95       	com	r24
 916:	70 95       	com	r23
 918:	61 95       	neg	r22
 91a:	7f 4f       	sbci	r23, 0xFF	; 255
 91c:	8f 4f       	sbci	r24, 0xFF	; 255
 91e:	9f 4f       	sbci	r25, 0xFF	; 255
 920:	08 95       	ret

00000922 <__floatunsisf>:
 922:	e8 94       	clt
 924:	09 c0       	rjmp	.+18     	; 0x938 <__floatsisf+0x12>

00000926 <__floatsisf>:
 926:	97 fb       	bst	r25, 7
 928:	3e f4       	brtc	.+14     	; 0x938 <__floatsisf+0x12>
 92a:	90 95       	com	r25
 92c:	80 95       	com	r24
 92e:	70 95       	com	r23
 930:	61 95       	neg	r22
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	8f 4f       	sbci	r24, 0xFF	; 255
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	99 23       	and	r25, r25
 93a:	a9 f0       	breq	.+42     	; 0x966 <__floatsisf+0x40>
 93c:	f9 2f       	mov	r31, r25
 93e:	96 e9       	ldi	r25, 0x96	; 150
 940:	bb 27       	eor	r27, r27
 942:	93 95       	inc	r25
 944:	f6 95       	lsr	r31
 946:	87 95       	ror	r24
 948:	77 95       	ror	r23
 94a:	67 95       	ror	r22
 94c:	b7 95       	ror	r27
 94e:	f1 11       	cpse	r31, r1
 950:	f8 cf       	rjmp	.-16     	; 0x942 <__floatsisf+0x1c>
 952:	fa f4       	brpl	.+62     	; 0x992 <__floatsisf+0x6c>
 954:	bb 0f       	add	r27, r27
 956:	11 f4       	brne	.+4      	; 0x95c <__floatsisf+0x36>
 958:	60 ff       	sbrs	r22, 0
 95a:	1b c0       	rjmp	.+54     	; 0x992 <__floatsisf+0x6c>
 95c:	6f 5f       	subi	r22, 0xFF	; 255
 95e:	7f 4f       	sbci	r23, 0xFF	; 255
 960:	8f 4f       	sbci	r24, 0xFF	; 255
 962:	9f 4f       	sbci	r25, 0xFF	; 255
 964:	16 c0       	rjmp	.+44     	; 0x992 <__floatsisf+0x6c>
 966:	88 23       	and	r24, r24
 968:	11 f0       	breq	.+4      	; 0x96e <__floatsisf+0x48>
 96a:	96 e9       	ldi	r25, 0x96	; 150
 96c:	11 c0       	rjmp	.+34     	; 0x990 <__floatsisf+0x6a>
 96e:	77 23       	and	r23, r23
 970:	21 f0       	breq	.+8      	; 0x97a <__floatsisf+0x54>
 972:	9e e8       	ldi	r25, 0x8E	; 142
 974:	87 2f       	mov	r24, r23
 976:	76 2f       	mov	r23, r22
 978:	05 c0       	rjmp	.+10     	; 0x984 <__floatsisf+0x5e>
 97a:	66 23       	and	r22, r22
 97c:	71 f0       	breq	.+28     	; 0x99a <__floatsisf+0x74>
 97e:	96 e8       	ldi	r25, 0x86	; 134
 980:	86 2f       	mov	r24, r22
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	60 e0       	ldi	r22, 0x00	; 0
 986:	2a f0       	brmi	.+10     	; 0x992 <__floatsisf+0x6c>
 988:	9a 95       	dec	r25
 98a:	66 0f       	add	r22, r22
 98c:	77 1f       	adc	r23, r23
 98e:	88 1f       	adc	r24, r24
 990:	da f7       	brpl	.-10     	; 0x988 <__floatsisf+0x62>
 992:	88 0f       	add	r24, r24
 994:	96 95       	lsr	r25
 996:	87 95       	ror	r24
 998:	97 f9       	bld	r25, 7
 99a:	08 95       	ret

0000099c <__fp_inf>:
 99c:	97 f9       	bld	r25, 7
 99e:	9f 67       	ori	r25, 0x7F	; 127
 9a0:	80 e8       	ldi	r24, 0x80	; 128
 9a2:	70 e0       	ldi	r23, 0x00	; 0
 9a4:	60 e0       	ldi	r22, 0x00	; 0
 9a6:	08 95       	ret

000009a8 <__fp_nan>:
 9a8:	9f ef       	ldi	r25, 0xFF	; 255
 9aa:	80 ec       	ldi	r24, 0xC0	; 192
 9ac:	08 95       	ret

000009ae <__fp_pscA>:
 9ae:	00 24       	eor	r0, r0
 9b0:	0a 94       	dec	r0
 9b2:	16 16       	cp	r1, r22
 9b4:	17 06       	cpc	r1, r23
 9b6:	18 06       	cpc	r1, r24
 9b8:	09 06       	cpc	r0, r25
 9ba:	08 95       	ret

000009bc <__fp_pscB>:
 9bc:	00 24       	eor	r0, r0
 9be:	0a 94       	dec	r0
 9c0:	12 16       	cp	r1, r18
 9c2:	13 06       	cpc	r1, r19
 9c4:	14 06       	cpc	r1, r20
 9c6:	05 06       	cpc	r0, r21
 9c8:	08 95       	ret

000009ca <__fp_round>:
 9ca:	09 2e       	mov	r0, r25
 9cc:	03 94       	inc	r0
 9ce:	00 0c       	add	r0, r0
 9d0:	11 f4       	brne	.+4      	; 0x9d6 <__fp_round+0xc>
 9d2:	88 23       	and	r24, r24
 9d4:	52 f0       	brmi	.+20     	; 0x9ea <__fp_round+0x20>
 9d6:	bb 0f       	add	r27, r27
 9d8:	40 f4       	brcc	.+16     	; 0x9ea <__fp_round+0x20>
 9da:	bf 2b       	or	r27, r31
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <__fp_round+0x18>
 9de:	60 ff       	sbrs	r22, 0
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__fp_round+0x20>
 9e2:	6f 5f       	subi	r22, 0xFF	; 255
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	08 95       	ret

000009ec <__fp_split3>:
 9ec:	57 fd       	sbrc	r21, 7
 9ee:	90 58       	subi	r25, 0x80	; 128
 9f0:	44 0f       	add	r20, r20
 9f2:	55 1f       	adc	r21, r21
 9f4:	59 f0       	breq	.+22     	; 0xa0c <__fp_splitA+0x10>
 9f6:	5f 3f       	cpi	r21, 0xFF	; 255
 9f8:	71 f0       	breq	.+28     	; 0xa16 <__fp_splitA+0x1a>
 9fa:	47 95       	ror	r20

000009fc <__fp_splitA>:
 9fc:	88 0f       	add	r24, r24
 9fe:	97 fb       	bst	r25, 7
 a00:	99 1f       	adc	r25, r25
 a02:	61 f0       	breq	.+24     	; 0xa1c <__fp_splitA+0x20>
 a04:	9f 3f       	cpi	r25, 0xFF	; 255
 a06:	79 f0       	breq	.+30     	; 0xa26 <__fp_splitA+0x2a>
 a08:	87 95       	ror	r24
 a0a:	08 95       	ret
 a0c:	12 16       	cp	r1, r18
 a0e:	13 06       	cpc	r1, r19
 a10:	14 06       	cpc	r1, r20
 a12:	55 1f       	adc	r21, r21
 a14:	f2 cf       	rjmp	.-28     	; 0x9fa <__fp_split3+0xe>
 a16:	46 95       	lsr	r20
 a18:	f1 df       	rcall	.-30     	; 0x9fc <__fp_splitA>
 a1a:	08 c0       	rjmp	.+16     	; 0xa2c <__fp_splitA+0x30>
 a1c:	16 16       	cp	r1, r22
 a1e:	17 06       	cpc	r1, r23
 a20:	18 06       	cpc	r1, r24
 a22:	99 1f       	adc	r25, r25
 a24:	f1 cf       	rjmp	.-30     	; 0xa08 <__fp_splitA+0xc>
 a26:	86 95       	lsr	r24
 a28:	71 05       	cpc	r23, r1
 a2a:	61 05       	cpc	r22, r1
 a2c:	08 94       	sec
 a2e:	08 95       	ret

00000a30 <__fp_zero>:
 a30:	e8 94       	clt

00000a32 <__fp_szero>:
 a32:	bb 27       	eor	r27, r27
 a34:	66 27       	eor	r22, r22
 a36:	77 27       	eor	r23, r23
 a38:	cb 01       	movw	r24, r22
 a3a:	97 f9       	bld	r25, 7
 a3c:	08 95       	ret

00000a3e <__mulsf3>:
 a3e:	0e 94 32 05 	call	0xa64	; 0xa64 <__mulsf3x>
 a42:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_round>
 a46:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fp_pscA>
 a4a:	38 f0       	brcs	.+14     	; 0xa5a <__mulsf3+0x1c>
 a4c:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_pscB>
 a50:	20 f0       	brcs	.+8      	; 0xa5a <__mulsf3+0x1c>
 a52:	95 23       	and	r25, r21
 a54:	11 f0       	breq	.+4      	; 0xa5a <__mulsf3+0x1c>
 a56:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_inf>
 a5a:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_nan>
 a5e:	11 24       	eor	r1, r1
 a60:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_szero>

00000a64 <__mulsf3x>:
 a64:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__fp_split3>
 a68:	70 f3       	brcs	.-36     	; 0xa46 <__mulsf3+0x8>

00000a6a <__mulsf3_pse>:
 a6a:	95 9f       	mul	r25, r21
 a6c:	c1 f3       	breq	.-16     	; 0xa5e <__mulsf3+0x20>
 a6e:	95 0f       	add	r25, r21
 a70:	50 e0       	ldi	r21, 0x00	; 0
 a72:	55 1f       	adc	r21, r21
 a74:	62 9f       	mul	r22, r18
 a76:	f0 01       	movw	r30, r0
 a78:	72 9f       	mul	r23, r18
 a7a:	bb 27       	eor	r27, r27
 a7c:	f0 0d       	add	r31, r0
 a7e:	b1 1d       	adc	r27, r1
 a80:	63 9f       	mul	r22, r19
 a82:	aa 27       	eor	r26, r26
 a84:	f0 0d       	add	r31, r0
 a86:	b1 1d       	adc	r27, r1
 a88:	aa 1f       	adc	r26, r26
 a8a:	64 9f       	mul	r22, r20
 a8c:	66 27       	eor	r22, r22
 a8e:	b0 0d       	add	r27, r0
 a90:	a1 1d       	adc	r26, r1
 a92:	66 1f       	adc	r22, r22
 a94:	82 9f       	mul	r24, r18
 a96:	22 27       	eor	r18, r18
 a98:	b0 0d       	add	r27, r0
 a9a:	a1 1d       	adc	r26, r1
 a9c:	62 1f       	adc	r22, r18
 a9e:	73 9f       	mul	r23, r19
 aa0:	b0 0d       	add	r27, r0
 aa2:	a1 1d       	adc	r26, r1
 aa4:	62 1f       	adc	r22, r18
 aa6:	83 9f       	mul	r24, r19
 aa8:	a0 0d       	add	r26, r0
 aaa:	61 1d       	adc	r22, r1
 aac:	22 1f       	adc	r18, r18
 aae:	74 9f       	mul	r23, r20
 ab0:	33 27       	eor	r19, r19
 ab2:	a0 0d       	add	r26, r0
 ab4:	61 1d       	adc	r22, r1
 ab6:	23 1f       	adc	r18, r19
 ab8:	84 9f       	mul	r24, r20
 aba:	60 0d       	add	r22, r0
 abc:	21 1d       	adc	r18, r1
 abe:	82 2f       	mov	r24, r18
 ac0:	76 2f       	mov	r23, r22
 ac2:	6a 2f       	mov	r22, r26
 ac4:	11 24       	eor	r1, r1
 ac6:	9f 57       	subi	r25, 0x7F	; 127
 ac8:	50 40       	sbci	r21, 0x00	; 0
 aca:	9a f0       	brmi	.+38     	; 0xaf2 <__mulsf3_pse+0x88>
 acc:	f1 f0       	breq	.+60     	; 0xb0a <__mulsf3_pse+0xa0>
 ace:	88 23       	and	r24, r24
 ad0:	4a f0       	brmi	.+18     	; 0xae4 <__mulsf3_pse+0x7a>
 ad2:	ee 0f       	add	r30, r30
 ad4:	ff 1f       	adc	r31, r31
 ad6:	bb 1f       	adc	r27, r27
 ad8:	66 1f       	adc	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	88 1f       	adc	r24, r24
 ade:	91 50       	subi	r25, 0x01	; 1
 ae0:	50 40       	sbci	r21, 0x00	; 0
 ae2:	a9 f7       	brne	.-22     	; 0xace <__mulsf3_pse+0x64>
 ae4:	9e 3f       	cpi	r25, 0xFE	; 254
 ae6:	51 05       	cpc	r21, r1
 ae8:	80 f0       	brcs	.+32     	; 0xb0a <__mulsf3_pse+0xa0>
 aea:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_inf>
 aee:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_szero>
 af2:	5f 3f       	cpi	r21, 0xFF	; 255
 af4:	e4 f3       	brlt	.-8      	; 0xaee <__mulsf3_pse+0x84>
 af6:	98 3e       	cpi	r25, 0xE8	; 232
 af8:	d4 f3       	brlt	.-12     	; 0xaee <__mulsf3_pse+0x84>
 afa:	86 95       	lsr	r24
 afc:	77 95       	ror	r23
 afe:	67 95       	ror	r22
 b00:	b7 95       	ror	r27
 b02:	f7 95       	ror	r31
 b04:	e7 95       	ror	r30
 b06:	9f 5f       	subi	r25, 0xFF	; 255
 b08:	c1 f7       	brne	.-16     	; 0xafa <__mulsf3_pse+0x90>
 b0a:	fe 2b       	or	r31, r30
 b0c:	88 0f       	add	r24, r24
 b0e:	91 1d       	adc	r25, r1
 b10:	96 95       	lsr	r25
 b12:	87 95       	ror	r24
 b14:	97 f9       	bld	r25, 7
 b16:	08 95       	ret

00000b18 <__umulhisi3>:
 b18:	a2 9f       	mul	r26, r18
 b1a:	b0 01       	movw	r22, r0
 b1c:	b3 9f       	mul	r27, r19
 b1e:	c0 01       	movw	r24, r0
 b20:	a3 9f       	mul	r26, r19
 b22:	70 0d       	add	r23, r0
 b24:	81 1d       	adc	r24, r1
 b26:	11 24       	eor	r1, r1
 b28:	91 1d       	adc	r25, r1
 b2a:	b2 9f       	mul	r27, r18
 b2c:	70 0d       	add	r23, r0
 b2e:	81 1d       	adc	r24, r1
 b30:	11 24       	eor	r1, r1
 b32:	91 1d       	adc	r25, r1
 b34:	08 95       	ret

00000b36 <_exit>:
 b36:	f8 94       	cli

00000b38 <__stop_program>:
 b38:	ff cf       	rjmp	.-2      	; 0xb38 <__stop_program>
