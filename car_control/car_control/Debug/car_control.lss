
car_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b70  00000c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800062  00800062  00000c06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a3e  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d81  00000000  00000000  0000392a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000108f  00000000  00000000  000046ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006bc  00000000  00000000  0000573c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e11  00000000  00000000  00005df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001680  00000000  00000000  00006c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00008289  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_3>
  10:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_4>
  14:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_10>
  2c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  8a:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MotorDC_Init>:

void MotorDC_Speed_PollingWithT2(uint8_t u8_motor_speed)
{
	// speed is the duty cycle 0 -> 100
	
	timer0SwPWM_new(u8_motor_speed,freq1k);
  92:	88 23       	and	r24, r24
  94:	19 f0       	breq	.+6      	; 0x9c <MotorDC_Init+0xa>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	01 f1       	breq	.+64     	; 0xda <MotorDC_Init+0x48>
  9a:	08 95       	ret
  9c:	4f ef       	ldi	r20, 0xFF	; 255
  9e:	64 e0       	ldi	r22, 0x04	; 4
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	68 e0       	ldi	r22, 0x08	; 8
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  b0:	4f ef       	ldi	r20, 0xFF	; 255
  b2:	60 e1       	ldi	r22, 0x10	; 16
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	68 e0       	ldi	r22, 0x08	; 8
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	60 e1       	ldi	r22, 0x10	; 16
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
  d8:	08 95       	ret
  da:	4f ef       	ldi	r20, 0xFF	; 255
  dc:	60 e4       	ldi	r22, 0x40	; 64
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  e4:	4f ef       	ldi	r20, 0xFF	; 255
  e6:	60 e8       	ldi	r22, 0x80	; 128
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  ee:	4f ef       	ldi	r20, 0xFF	; 255
  f0:	60 e2       	ldi	r22, 0x20	; 32
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	60 e4       	ldi	r22, 0x40	; 64
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	60 e8       	ldi	r22, 0x80	; 128
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	60 e2       	ldi	r22, 0x20	; 32
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 116:	08 95       	ret

00000118 <MotorDC_Dir>:
 118:	88 23       	and	r24, r24
 11a:	19 f0       	breq	.+6      	; 0x122 <MotorDC_Dir+0xa>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	41 f1       	breq	.+80     	; 0x170 <MotorDC_Dir+0x58>
 120:	08 95       	ret
 122:	61 30       	cpi	r22, 0x01	; 1
 124:	21 f0       	breq	.+8      	; 0x12e <MotorDC_Dir+0x16>
 126:	c8 f0       	brcs	.+50     	; 0x15a <MotorDC_Dir+0x42>
 128:	62 30       	cpi	r22, 0x02	; 2
 12a:	61 f0       	breq	.+24     	; 0x144 <MotorDC_Dir+0x2c>
 12c:	08 95       	ret
 12e:	4f ef       	ldi	r20, 0xFF	; 255
 130:	64 e0       	ldi	r22, 0x04	; 4
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	68 e0       	ldi	r22, 0x08	; 8
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 142:	08 95       	ret
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	64 e0       	ldi	r22, 0x04	; 4
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 14e:	4f ef       	ldi	r20, 0xFF	; 255
 150:	68 e0       	ldi	r22, 0x08	; 8
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 158:	08 95       	ret
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	64 e0       	ldi	r22, 0x04	; 4
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	68 e0       	ldi	r22, 0x08	; 8
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 16e:	08 95       	ret
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	21 f0       	breq	.+8      	; 0x17c <MotorDC_Dir+0x64>
 174:	c8 f0       	brcs	.+50     	; 0x1a8 <MotorDC_Dir+0x90>
 176:	62 30       	cpi	r22, 0x02	; 2
 178:	61 f0       	breq	.+24     	; 0x192 <MotorDC_Dir+0x7a>
 17a:	08 95       	ret
 17c:	4f ef       	ldi	r20, 0xFF	; 255
 17e:	60 e4       	ldi	r22, 0x40	; 64
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	60 e8       	ldi	r22, 0x80	; 128
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 190:	08 95       	ret
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	60 e4       	ldi	r22, 0x40	; 64
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 19c:	4f ef       	ldi	r20, 0xFF	; 255
 19e:	60 e8       	ldi	r22, 0x80	; 128
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 1a6:	08 95       	ret
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	60 e4       	ldi	r22, 0x40	; 64
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	60 e8       	ldi	r22, 0x80	; 128
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 1bc:	08 95       	ret

000001be <MotorDC_Speed_HwPWM>:
	
}

void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24
	// intialize bits of OCRA , OCRB 
	gpioPinDirection(GPIOD,BIT5 , OUTPUT);
 1c2:	4f ef       	ldi	r20, 0xFF	; 255
 1c4:	60 e2       	ldi	r22, 0x20	; 32
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
	gpioPinDirection(GPIOD ,BIT4 , OUTPUT);
 1cc:	4f ef       	ldi	r20, 0xFF	; 255
 1ce:	60 e1       	ldi	r22, 0x10	; 16
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
	
	HwPWMSetDuty(u8_motor_speed , 100) ;
 1d6:	64 e6       	ldi	r22, 0x64	; 100
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	8c 2f       	mov	r24, r28
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 a1 01 	call	0x342	; 0x342 <HwPWMSetDuty>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
	
	// HIGH -> output .. OR
	if (u8_direction == HIGH ){
 1e6:	4f 3f       	cpi	r20, 0xFF	; 255
 1e8:	c1 f4       	brne	.+48     	; 0x21a <gpioPinDirection+0x34>
	switch(u8_port)
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	51 f0       	breq	.+20     	; 0x202 <gpioPinDirection+0x1c>
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <gpioPinDirection+0x14>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	59 f0       	breq	.+22     	; 0x20a <gpioPinDirection+0x24>
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	69 f0       	breq	.+26     	; 0x212 <gpioPinDirection+0x2c>
 1f8:	08 95       	ret
	{
		case GPIOA : 
		
		PORTA_DIR = PORTA_DIR | u8_pins ;
 1fa:	8a b3       	in	r24, 0x1a	; 26
 1fc:	68 2b       	or	r22, r24
 1fe:	6a bb       	out	0x1a, r22	; 26
			break;
 200:	08 95       	ret
			
		case GPIOB : 
		 
		PORTB_DIR = PORTB_DIR | u8_pins ;
 202:	87 b3       	in	r24, 0x17	; 23
 204:	68 2b       	or	r22, r24
 206:	67 bb       	out	0x17, r22	; 23
			break;
 208:	08 95       	ret
			
		case GPIOC : 
				 
		PORTC_DIR = PORTC_DIR | u8_pins ;
 20a:	84 b3       	in	r24, 0x14	; 20
 20c:	68 2b       	or	r22, r24
 20e:	64 bb       	out	0x14, r22	; 20
			break;
 210:	08 95       	ret

		case GPIOD : 
				 
		PORTD_DIR = PORTD_DIR | u8_pins ;
 212:	81 b3       	in	r24, 0x11	; 17
 214:	68 2b       	or	r22, r24
 216:	61 bb       	out	0x11, r22	; 17
			break;
 218:	08 95       	ret

	}
	}else {
		switch(u8_port) {
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	59 f0       	breq	.+22     	; 0x234 <gpioPinDirection+0x4e>
 21e:	28 f0       	brcs	.+10     	; 0x22a <gpioPinDirection+0x44>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	69 f0       	breq	.+26     	; 0x23e <gpioPinDirection+0x58>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	81 f0       	breq	.+32     	; 0x248 <gpioPinDirection+0x62>
 228:	08 95       	ret
		case GPIOA :
		
		PORTA_DIR = PORTA_DIR & ~(u8_pins) ;
 22a:	8a b3       	in	r24, 0x1a	; 26
 22c:	60 95       	com	r22
 22e:	68 23       	and	r22, r24
 230:	6a bb       	out	0x1a, r22	; 26
		break;
 232:	08 95       	ret
		
		case GPIOB :
		
		PORTB_DIR = PORTB_DIR & ~(u8_pins) ;
 234:	87 b3       	in	r24, 0x17	; 23
 236:	60 95       	com	r22
 238:	68 23       	and	r22, r24
 23a:	67 bb       	out	0x17, r22	; 23
		break;
 23c:	08 95       	ret
		
		case GPIOC :
		
		PORTC_DIR = PORTC_DIR & ~(u8_pins) ;
 23e:	84 b3       	in	r24, 0x14	; 20
 240:	60 95       	com	r22
 242:	68 23       	and	r22, r24
 244:	64 bb       	out	0x14, r22	; 20
		break;
 246:	08 95       	ret

		case GPIOD :
		
		PORTD_DIR = PORTD_DIR & ~(u8_pins) ;
 248:	81 b3       	in	r24, 0x11	; 17
 24a:	60 95       	com	r22
 24c:	68 23       	and	r22, r24
 24e:	61 bb       	out	0x11, r22	; 17
 250:	08 95       	ret

00000252 <gpioPinWrite>:
		break;
		
	} */
	  
	 uint8_t temp ;
	 switch (u8_port) {
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	71 f0       	breq	.+28     	; 0x272 <gpioPinWrite+0x20>
 256:	28 f0       	brcs	.+10     	; 0x262 <gpioPinWrite+0x10>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	99 f0       	breq	.+38     	; 0x282 <gpioPinWrite+0x30>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	c9 f0       	breq	.+50     	; 0x292 <gpioPinWrite+0x40>
 260:	08 95       	ret
	 case GPIOA : 
	 temp =  PORTA_DATA  & ~(u8_pins) ;
 262:	8b b3       	in	r24, 0x1b	; 27
	 PORTA_DATA = temp |(u8_value&u8_pins) ;
 264:	96 2f       	mov	r25, r22
 266:	90 95       	com	r25
 268:	89 23       	and	r24, r25
 26a:	46 23       	and	r20, r22
 26c:	48 2b       	or	r20, r24
 26e:	4b bb       	out	0x1b, r20	; 27
	 break;
 270:	08 95       	ret
	 case GPIOB : 
	 temp =  PORTB_DATA  & ~(u8_pins) ;
 272:	88 b3       	in	r24, 0x18	; 24
	 PORTB_DATA = temp |(u8_value&u8_pins) ;
 274:	96 2f       	mov	r25, r22
 276:	90 95       	com	r25
 278:	89 23       	and	r24, r25
 27a:	46 23       	and	r20, r22
 27c:	48 2b       	or	r20, r24
 27e:	48 bb       	out	0x18, r20	; 24
	 break;
 280:	08 95       	ret
	 case GPIOC :
	 temp =  PORTC_DATA  & ~(u8_pins) ;
 282:	85 b3       	in	r24, 0x15	; 21
	 PORTC_DATA = temp |(u8_value&u8_pins) ;
 284:	96 2f       	mov	r25, r22
 286:	90 95       	com	r25
 288:	89 23       	and	r24, r25
 28a:	46 23       	and	r20, r22
 28c:	48 2b       	or	r20, r24
 28e:	45 bb       	out	0x15, r20	; 21
	 break;
 290:	08 95       	ret
	 case GPIOD :
	 temp =  PORTD_DATA  & ~(u8_pins) ;
 292:	82 b3       	in	r24, 0x12	; 18
	 PORTD_DATA = temp |(u8_value&u8_pins) ;
 294:	96 2f       	mov	r25, r22
 296:	90 95       	com	r25
 298:	89 23       	and	r24, r25
 29a:	46 23       	and	r20, r22
 29c:	48 2b       	or	r20, r24
 29e:	42 bb       	out	0x12, r20	; 18
 2a0:	08 95       	ret

000002a2 <HwPWMInit>:
#define PWM_PRE_SCALE 64
#define PWM_PRE_scale_MASK T1_PRESCALER_1024
uint8_t global_duty = 0;
uint8_t global_req_freq = 0;

void HwPWMInit(void){
 2a2:	af 92       	push	r10
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
	
uint16_t ICR_TOP ;
uint16_t duty_cycle_tick ;


ICR_TOP = F_CPU / (2.0 * PWM_PRE_SCALE * global_req_freq) ;
 2b0:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatsisf>
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	53 e4       	ldi	r21, 0x43	; 67
 2c6:	0e 94 3a 05 	call	0xa74	; 0xa74 <__mulsf3>
 2ca:	9b 01       	movw	r18, r22
 2cc:	ac 01       	movw	r20, r24
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	74 e2       	ldi	r23, 0x24	; 36
 2d2:	84 e7       	ldi	r24, 0x74	; 116
 2d4:	9b e4       	ldi	r25, 0x4B	; 75
 2d6:	0e 94 0b 04 	call	0x816	; 0x816 <__divsf3>
 2da:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixunssfsi>
 2de:	6b 01       	movw	r12, r22
 2e0:	7c 01       	movw	r14, r24


//ICR_TOP = 0x004E;

duty_cycle_tick = ICR_TOP *global_duty/100.0 ;
 2e2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <global_duty>
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	8c 9d       	mul	r24, r12
 2ea:	b0 01       	movw	r22, r0
 2ec:	8d 9d       	mul	r24, r13
 2ee:	70 0d       	add	r23, r0
 2f0:	9c 9d       	mul	r25, r12
 2f2:	70 0d       	add	r23, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 ac 04 	call	0x958	; 0x958 <__floatunsisf>
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	48 ec       	ldi	r20, 0xC8	; 200
 304:	52 e4       	ldi	r21, 0x42	; 66
 306:	0e 94 0b 04 	call	0x816	; 0x816 <__divsf3>
 30a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixunssfsi>
timer1Init(T1_PHASE_CORRECT_ICR1, T1_OC1A_CLEAR|T1_OC1B_CLEAR , 
 30e:	a1 2c       	mov	r10, r1
 310:	7b 01       	movw	r14, r22
 312:	8b 01       	movw	r16, r22
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	45 e0       	ldi	r20, 0x05	; 5
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 ea       	ldi	r23, 0xA0	; 160
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	92 e0       	ldi	r25, 0x02	; 2
 324:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <timer1Init>
			PWM_PRE_scale_MASK , 0 , duty_cycle_tick, duty_cycle_tick,ICR_TOP, T1_POLLING);	
	TCCR1 |= 0x0005;
 328:	8e b5       	in	r24, 0x2e	; 46
 32a:	9f b5       	in	r25, 0x2f	; 47
 32c:	85 60       	ori	r24, 0x05	; 5
 32e:	9f bd       	out	0x2f, r25	; 47
 330:	8e bd       	out	0x2e, r24	; 46
	
	//timer1Start();
}
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	af 90       	pop	r10
 340:	08 95       	ret

00000342 <HwPWMSetDuty>:


void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency){
	
	global_duty = a_u8_duty ;
 342:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <global_duty>
	global_req_freq = a_u32_frequency ;
 346:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__data_end>
	HwPWMInit();
 34a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <HwPWMInit>
 34e:	08 95       	ret

00000350 <Led_Init>:
 */ 
#include "led.h"

void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	61 f0       	breq	.+24     	; 0x36c <Led_Init+0x1c>
 354:	28 f0       	brcs	.+10     	; 0x360 <Led_Init+0x10>
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	79 f0       	breq	.+30     	; 0x378 <Led_Init+0x28>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	99 f0       	breq	.+38     	; 0x384 <Led_Init+0x34>
 35e:	08 95       	ret
	{
		case LED_0 : 
			gpioPinDirection(LED_0_GPIO , LED_0_BIT , OUTPUT);
 360:	4f ef       	ldi	r20, 0xFF	; 255
 362:	60 e1       	ldi	r22, 0x10	; 16
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
			break;
 36a:	08 95       	ret
		case LED_1 :
			gpioPinDirection(LED_1_GPIO , LED_1_BIT , OUTPUT);
 36c:	4f ef       	ldi	r20, 0xFF	; 255
 36e:	60 e2       	ldi	r22, 0x20	; 32
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
			break;
 376:	08 95       	ret
		case LED_2 :
			gpioPinDirection(LED_2_GPIO , LED_2_BIT , OUTPUT);
 378:	4f ef       	ldi	r20, 0xFF	; 255
 37a:	60 e4       	ldi	r22, 0x40	; 64
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
			break;
 382:	08 95       	ret
		case LED_3 :
			gpioPinDirection(LED_3_GPIO , LED_3_BIT , OUTPUT);
 384:	4f ef       	ldi	r20, 0xFF	; 255
 386:	60 e8       	ldi	r22, 0x80	; 128
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
 38e:	08 95       	ret

00000390 <main>:
{
	uint16_t Distance ;
	//////////// icu ////////////////////
	
	///// enable global interrupt 
	SREG |=0x80;
 390:	8f b7       	in	r24, 0x3f	; 63
 392:	80 68       	ori	r24, 0x80	; 128
 394:	8f bf       	out	0x3f, r24	; 63
		/////external interrupt1 pin 
	gpioPinDirection(GPIOB , BIT2 , INPUT );
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	64 e0       	ldi	r22, 0x04	; 4
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
	
	///for protus 
	gpioPinWrite(GPIOB,BIT2,HIGH);
 3a0:	4f ef       	ldi	r20, 0xFF	; 255
 3a2:	64 e0       	ldi	r22, 0x04	; 4
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	
	Led_Init(LED_0);
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 a8 01 	call	0x350	; 0x350 <Led_Init>
	Led_Init(LED_1);
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 a8 01 	call	0x350	; 0x350 <Led_Init>
	Led_Init(LED_2);
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	0e 94 a8 01 	call	0x350	; 0x350 <Led_Init>
	Led_Init(LED_3);
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	0e 94 a8 01 	call	0x350	; 0x350 <Led_Init>
	
	
	SwICU_Init(SwICU_EdgeRisiging);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 14 02 	call	0x428	; 0x428 <SwICU_Init>
	
	/// direction of trigger
	
	gpioPinDirection(GPIOC , BIT0 ,OUTPUT);
 3c8:	4f ef       	ldi	r20, 0xFF	; 255
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpioPinDirection>
	
	timer2DelayMs(20);
 3d2:	84 e1       	ldi	r24, 0x14	; 20
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 37 03 	call	0x66e	; 0x66e <timer2DelayMs>
	
	//////////motor///////////////
	
	/// set direction
	MotorDC_Init(MOT_1);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 49 00 	call	0x92	; 0x92 <MotorDC_Init>
	MotorDC_Init(MOT_2);
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 49 00 	call	0x92	; 0x92 <MotorDC_Init>
	
	MotorDC_Dir(MOT_1,FORWARD);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 8c 00 	call	0x118	; 0x118 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,FORWARD);
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 8c 00 	call	0x118	; 0x118 <MotorDC_Dir>
	
	/// set speed 
	
	MotorDC_Speed_HwPWM(50) ;
 3f6:	82 e3       	ldi	r24, 0x32	; 50
 3f8:	0e 94 df 00 	call	0x1be	; 0x1be <MotorDC_Speed_HwPWM>
    
    while (1) 
    {
		// read the distance between the car and any obstacle infront of it 
		
		Distance = ultrasonic_init ();
 3fc:	0e 94 e7 03 	call	0x7ce	; 0x7ce <ultrasonic_init>
		
		/// if the distance between the object and the car less than 5 cm the car stops 
		
		if( Distance<= 5 ){
 400:	06 97       	sbiw	r24, 0x06	; 6
 402:	48 f4       	brcc	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			
			MotorDC_Dir(MOT_1,STOP);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 8c 00 	call	0x118	; 0x118 <MotorDC_Dir>
			MotorDC_Dir(MOT_2,STOP);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 8c 00 	call	0x118	; 0x118 <MotorDC_Dir>
 414:	f3 cf       	rjmp	.-26     	; 0x3fc <main+0x6c>
		}else {
			MotorDC_Dir(MOT_1,FORWARD);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 8c 00 	call	0x118	; 0x118 <MotorDC_Dir>
			MotorDC_Dir(MOT_2,FORWARD);
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 8c 00 	call	0x118	; 0x118 <MotorDC_Dir>
 426:	ea cf       	rjmp	.-44     	; 0x3fc <main+0x6c>

00000428 <SwICU_Init>:
void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdgeedge){
	
	if(a_en_inputCaptureEdgeedge== SwICU_EdgeRisiging)
		SET_BIT(INT2_EDGE_GPIO , INT2_EN_BIT);
	else
		CLEAR_BIT(INT2_EDGE_GPIO , INT2_EN_BIT);
 428:	ef 92       	push	r14
 42a:	0f 93       	push	r16
 42c:	cf 93       	push	r28
 42e:	c8 2f       	mov	r28, r24
 430:	e1 2c       	mov	r14, r1
 432:	00 e0       	ldi	r16, 0x00	; 0
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	44 e0       	ldi	r20, 0x04	; 4
 438:	60 e3       	ldi	r22, 0x30	; 48
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <timer0Init>
 440:	c1 30       	cpi	r28, 0x01	; 1
 442:	21 f4       	brne	.+8      	; 0x44c <SwICU_Init+0x24>
 444:	84 b7       	in	r24, 0x34	; 52
 446:	80 64       	ori	r24, 0x40	; 64
 448:	84 bf       	out	0x34, r24	; 52
 44a:	03 c0       	rjmp	.+6      	; 0x452 <SwICU_Init+0x2a>
 44c:	84 b7       	in	r24, 0x34	; 52
 44e:	8f 7b       	andi	r24, 0xBF	; 191
 450:	84 bf       	out	0x34, r24	; 52
 452:	8b b7       	in	r24, 0x3b	; 59
 454:	80 62       	ori	r24, 0x20	; 32
 456:	8b bf       	out	0x3b, r24	; 59
 458:	cf 91       	pop	r28
 45a:	0f 91       	pop	r16
 45c:	ef 90       	pop	r14
 45e:	08 95       	ret

00000460 <SwICU_Read>:

//read th TCNT

void SwICU_Read(volatile uint8_t * a_pu8_capt){
	
	*(a_pu8_capt) = TCNT_value ;
 460:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <TCNT_value>
 464:	fc 01       	movw	r30, r24
 466:	20 83       	st	Z, r18
 468:	08 95       	ret

0000046a <SwICU_Stop>:
}

//stop timer

void SwICU_Stop(void){
	timer0Stop() ;
 46a:	0e 94 92 02 	call	0x524	; 0x524 <timer0Stop>
	TCNT_value = timer0Read() ;
 46e:	0e 94 8a 02 	call	0x514	; 0x514 <timer0Read>
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <TCNT_value+0x1>
 478:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TCNT_value>
	TCNT0 = 0 ;
 47c:	12 be       	out	0x32, r1	; 50
 47e:	08 95       	ret

00000480 <__vector_3>:

static uint16_t TCNT_value = 0 ;



ISR(INT2_vect){
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	2f 93       	push	r18
 48c:	3f 93       	push	r19
 48e:	4f 93       	push	r20
 490:	5f 93       	push	r21
 492:	6f 93       	push	r22
 494:	7f 93       	push	r23
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
	
	//Led_Init(LED_1);
	//Led_On(LED_1);
	switch (flag){
 4a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4a6:	88 23       	and	r24, r24
 4a8:	51 f0       	breq	.+20     	; 0x4be <__vector_3+0x3e>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	81 f4       	brne	.+32     	; 0x4ce <__vector_3+0x4e>
	
}

//
void SwICU_Start(void){
	timer0Start() ;
 4ae:	0e 94 8c 02 	call	0x518	; 0x518 <timer0Start>
	switch (flag){
		
		case SwICU_EdgeRisiging :
		
		SwICU_Start();
		MCUCSR &= ~(1<<6) ;
 4b2:	84 b7       	in	r24, 0x34	; 52
 4b4:	8f 7b       	andi	r24, 0xBF	; 191
 4b6:	84 bf       	out	0x34, r24	; 52
		//Led_On(LED_0) ;
		flag = SwICU_EdgeFalling;
 4b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
 4bc:	08 c0       	rjmp	.+16     	; 0x4ce <__vector_3+0x4e>
		
		case SwICU_EdgeFalling :
		
		SwICU_Stop();
 4be:	0e 94 35 02 	call	0x46a	; 0x46a <SwICU_Stop>
		MCUCSR |= 1<<6 ;
 4c2:	84 b7       	in	r24, 0x34	; 52
 4c4:	80 64       	ori	r24, 0x40	; 64
 4c6:	84 bf       	out	0x34, r24	; 52
		//Led_Off(LED_0) ;
		flag = SwICU_EdgeRisiging;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
		
	}
		
}
 4ce:	ff 91       	pop	r31
 4d0:	ef 91       	pop	r30
 4d2:	bf 91       	pop	r27
 4d4:	af 91       	pop	r26
 4d6:	9f 91       	pop	r25
 4d8:	8f 91       	pop	r24
 4da:	7f 91       	pop	r23
 4dc:	6f 91       	pop	r22
 4de:	5f 91       	pop	r21
 4e0:	4f 91       	pop	r20
 4e2:	3f 91       	pop	r19
 4e4:	2f 91       	pop	r18
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <timer0Init>:
	sei();
	timer2Start();
	gpioPinWrite(T2_PWM_GPIO1 , T2_PWM_BIT1 , HIGH);
	gpioPinWrite(T2_PWM_GPIO2 , T2_PWM_BIT2 , HIGH);
	
}
 4f0:	ef 92       	push	r14
 4f2:	0f 93       	push	r16
 4f4:	13 be       	out	0x33, r1	; 51
 4f6:	86 2b       	or	r24, r22
 4f8:	83 bf       	out	0x33, r24	; 51
 4fa:	22 bf       	out	0x32, r18	; 50
 4fc:	0c bf       	out	0x3c, r16	; 60
 4fe:	89 b7       	in	r24, 0x39	; 57
 500:	e8 2a       	or	r14, r24
 502:	e9 be       	out	0x39, r14	; 57
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	50 93 68 00 	sts	0x0068, r21	; 0x800068 <global_prescale+0x1>
 50a:	40 93 67 00 	sts	0x0067, r20	; 0x800067 <global_prescale>
 50e:	0f 91       	pop	r16
 510:	ef 90       	pop	r14
 512:	08 95       	ret

00000514 <timer0Read>:
 514:	82 b7       	in	r24, 0x32	; 50
 516:	08 95       	ret

00000518 <timer0Start>:
 518:	93 b7       	in	r25, 0x33	; 51
 51a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <global_prescale>
 51e:	89 2b       	or	r24, r25
 520:	83 bf       	out	0x33, r24	; 51
 522:	08 95       	ret

00000524 <timer0Stop>:
 524:	83 b7       	in	r24, 0x33	; 51
 526:	88 7f       	andi	r24, 0xF8	; 248
 528:	83 bf       	out	0x33, r24	; 51
 52a:	08 95       	ret

0000052c <__vector_10>:
 52c:	1f 92       	push	r1
 52e:	0f 92       	push	r0
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	0f 92       	push	r0
 534:	11 24       	eor	r1, r1
 536:	2f 93       	push	r18
 538:	3f 93       	push	r19
 53a:	4f 93       	push	r20
 53c:	5f 93       	push	r21
 53e:	6f 93       	push	r22
 540:	7f 93       	push	r23
 542:	8f 93       	push	r24
 544:	9f 93       	push	r25
 546:	af 93       	push	r26
 548:	bf 93       	push	r27
 54a:	ef 93       	push	r30
 54c:	ff 93       	push	r31
 54e:	4f ef       	ldi	r20, 0xFF	; 255
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_11>:
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
 5a6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <global_T0frequency>
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	39 f0       	breq	.+14     	; 0x5bc <__vector_11+0x42>
 5ae:	18 f0       	brcs	.+6      	; 0x5b6 <__vector_11+0x3c>
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	39 f0       	breq	.+14     	; 0x5c2 <__vector_11+0x48>
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <__vector_11+0x4c>
 5b6:	85 e0       	ldi	r24, 0x05	; 5
 5b8:	82 bf       	out	0x32, r24	; 50
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <__vector_11+0x4c>
 5bc:	83 e8       	ldi	r24, 0x83	; 131
 5be:	82 bf       	out	0x32, r24	; 50
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <__vector_11+0x4c>
 5c2:	83 e8       	ldi	r24, 0x83	; 131
 5c4:	82 bf       	out	0x32, r24	; 50
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <timer1Init>:
 5e8:	af 92       	push	r10
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	1f bc       	out	0x2f, r1	; 47
 5f8:	1e bc       	out	0x2e, r1	; 46
 5fa:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <global_prescale1+0x1>
 5fe:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <global_prescale1>
 602:	86 2b       	or	r24, r22
 604:	97 2b       	or	r25, r23
 606:	9f bd       	out	0x2f, r25	; 47
 608:	8e bd       	out	0x2e, r24	; 46
 60a:	d7 bc       	out	0x27, r13	; 39
 60c:	c6 bc       	out	0x26, r12	; 38
 60e:	3d bd       	out	0x2d, r19	; 45
 610:	2c bd       	out	0x2c, r18	; 44
 612:	1b bd       	out	0x2b, r17	; 43
 614:	0a bd       	out	0x2a, r16	; 42
 616:	f9 bc       	out	0x29, r15	; 41
 618:	e8 bc       	out	0x28, r14	; 40
 61a:	89 b7       	in	r24, 0x39	; 57
 61c:	a8 2a       	or	r10, r24
 61e:	a9 be       	out	0x39, r10	; 57
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	ff 90       	pop	r15
 626:	ef 90       	pop	r14
 628:	df 90       	pop	r13
 62a:	cf 90       	pop	r12
 62c:	af 90       	pop	r10
 62e:	08 95       	ret

00000630 <timer2Init>:
 630:	cf 92       	push	r12
 632:	0f 93       	push	r16
 634:	92 b5       	in	r25, 0x22	; 34
 636:	90 7f       	andi	r25, 0xF0	; 240
 638:	92 bd       	out	0x22, r25	; 34
 63a:	15 bc       	out	0x25, r1	; 37
 63c:	86 2b       	or	r24, r22
 63e:	85 bd       	out	0x25, r24	; 37
 640:	24 bd       	out	0x24, r18	; 36
 642:	03 bd       	out	0x23, r16	; 35
 644:	89 b7       	in	r24, 0x39	; 57
 646:	c8 2a       	or	r12, r24
 648:	c9 be       	out	0x39, r12	; 57
 64a:	50 e0       	ldi	r21, 0x00	; 0
 64c:	50 93 74 00 	sts	0x0074, r21	; 0x800074 <global_prescale2+0x1>
 650:	40 93 73 00 	sts	0x0073, r20	; 0x800073 <global_prescale2>
 654:	0f 91       	pop	r16
 656:	cf 90       	pop	r12
 658:	08 95       	ret

0000065a <timer2Start>:
 65a:	95 b5       	in	r25, 0x25	; 37
 65c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <global_prescale2>
 660:	89 2b       	or	r24, r25
 662:	85 bd       	out	0x25, r24	; 37
 664:	08 95       	ret

00000666 <timer2Stop>:
 666:	83 b7       	in	r24, 0x33	; 51
 668:	88 7f       	andi	r24, 0xF8	; 248
 66a:	83 bf       	out	0x33, r24	; 51
 66c:	08 95       	ret

0000066e <timer2DelayMs>:
 66e:	cf 92       	push	r12
 670:	ef 92       	push	r14
 672:	0f 93       	push	r16
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	ec 01       	movw	r28, r24
 67a:	c1 2c       	mov	r12, r1
 67c:	e1 2c       	mov	r14, r1
 67e:	0a ef       	ldi	r16, 0xFA	; 250
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	44 e0       	ldi	r20, 0x04	; 4
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	88 e0       	ldi	r24, 0x08	; 8
 688:	0e 94 18 03 	call	0x630	; 0x630 <timer2Init>
 68c:	8c e0       	ldi	r24, 0x0C	; 12
 68e:	84 bd       	out	0x24, r24	; 36
 690:	0e 94 2d 03 	call	0x65a	; 0x65a <timer2Start>
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <timer2DelayMs+0x38>
 696:	08 b6       	in	r0, 0x38	; 56
 698:	07 fe       	sbrs	r0, 7
 69a:	fd cf       	rjmp	.-6      	; 0x696 <timer2DelayMs+0x28>
 69c:	21 97       	sbiw	r28, 0x01	; 1
 69e:	14 bc       	out	0x24, r1	; 36
 6a0:	88 b7       	in	r24, 0x38	; 56
 6a2:	80 68       	ori	r24, 0x80	; 128
 6a4:	88 bf       	out	0x38, r24	; 56
 6a6:	20 97       	sbiw	r28, 0x00	; 0
 6a8:	21 f0       	breq	.+8      	; 0x6b2 <timer2DelayMs+0x44>
 6aa:	08 b6       	in	r0, 0x38	; 56
 6ac:	07 fe       	sbrs	r0, 7
 6ae:	f3 cf       	rjmp	.-26     	; 0x696 <timer2DelayMs+0x28>
 6b0:	f5 cf       	rjmp	.-22     	; 0x69c <timer2DelayMs+0x2e>
 6b2:	0e 94 33 03 	call	0x666	; 0x666 <timer2Stop>
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	0f 91       	pop	r16
 6bc:	ef 90       	pop	r14
 6be:	cf 90       	pop	r12
 6c0:	08 95       	ret

000006c2 <__vector_4>:

ISR(TIMER2_COMP_vect){
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	2f 93       	push	r18
 6ce:	3f 93       	push	r19
 6d0:	4f 93       	push	r20
 6d2:	5f 93       	push	r21
 6d4:	6f 93       	push	r22
 6d6:	7f 93       	push	r23
 6d8:	8f 93       	push	r24
 6da:	9f 93       	push	r25
 6dc:	af 93       	push	r26
 6de:	bf 93       	push	r27
 6e0:	ef 93       	push	r30
 6e2:	ff 93       	push	r31
		gpioPinToggle( T0_PWM_GPIO , T0_PWM_BIT  );
		break;
	}
	timer0Start(); */

gpioPinWrite( T2_PWM_GPIO1 , T2_PWM_BIT1 ,HIGH);
 6e4:	4f ef       	ldi	r20, 0xFF	; 255
 6e6:	60 e1       	ldi	r22, 0x10	; 16
 6e8:	83 e0       	ldi	r24, 0x03	; 3
 6ea:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
gpioPinWrite( T2_PWM_GPIO2 , T2_PWM_BIT2 ,HIGH);
 6ee:	4f ef       	ldi	r20, 0xFF	; 255
 6f0:	60 e2       	ldi	r22, 0x20	; 32
 6f2:	83 e0       	ldi	r24, 0x03	; 3
 6f4:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
}
 6f8:	ff 91       	pop	r31
 6fa:	ef 91       	pop	r30
 6fc:	bf 91       	pop	r27
 6fe:	af 91       	pop	r26
 700:	9f 91       	pop	r25
 702:	8f 91       	pop	r24
 704:	7f 91       	pop	r23
 706:	6f 91       	pop	r22
 708:	5f 91       	pop	r21
 70a:	4f 91       	pop	r20
 70c:	3f 91       	pop	r19
 70e:	2f 91       	pop	r18
 710:	0f 90       	pop	r0
 712:	0f be       	out	0x3f, r0	; 63
 714:	0f 90       	pop	r0
 716:	1f 90       	pop	r1
 718:	18 95       	reti

0000071a <__vector_5>:

ISR(TIMER2_OVF_vect){
 71a:	1f 92       	push	r1
 71c:	0f 92       	push	r0
 71e:	0f b6       	in	r0, 0x3f	; 63
 720:	0f 92       	push	r0
 722:	11 24       	eor	r1, r1
 724:	2f 93       	push	r18
 726:	3f 93       	push	r19
 728:	4f 93       	push	r20
 72a:	5f 93       	push	r21
 72c:	6f 93       	push	r22
 72e:	7f 93       	push	r23
 730:	8f 93       	push	r24
 732:	9f 93       	push	r25
 734:	af 93       	push	r26
 736:	bf 93       	push	r27
 738:	ef 93       	push	r30
 73a:	ff 93       	push	r31
	gpioPinWrite( T2_PWM_GPIO1 , T2_PWM_BIT1 ,LOW);
 73c:	40 e0       	ldi	r20, 0x00	; 0
 73e:	60 e1       	ldi	r22, 0x10	; 16
 740:	83 e0       	ldi	r24, 0x03	; 3
 742:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	gpioPinWrite( T2_PWM_GPIO2 , T2_PWM_BIT2 ,LOW);	
 746:	40 e0       	ldi	r20, 0x00	; 0
 748:	60 e2       	ldi	r22, 0x20	; 32
 74a:	83 e0       	ldi	r24, 0x03	; 3
 74c:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	switch (global_T0frequency){
 750:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <global_T0frequency>
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	39 f0       	breq	.+14     	; 0x766 <__vector_5+0x4c>
 758:	18 f0       	brcs	.+6      	; 0x760 <__vector_5+0x46>
 75a:	82 30       	cpi	r24, 0x02	; 2
 75c:	39 f0       	breq	.+14     	; 0x76c <__vector_5+0x52>
 75e:	08 c0       	rjmp	.+16     	; 0x770 <__vector_5+0x56>
		case freq1k : TCNT0 = 5 ;
 760:	85 e0       	ldi	r24, 0x05	; 5
 762:	82 bf       	out	0x32, r24	; 50
				break;
 764:	05 c0       	rjmp	.+10     	; 0x770 <__vector_5+0x56>
		case freq2k : TCNT0 = 131 ;
 766:	83 e8       	ldi	r24, 0x83	; 131
 768:	82 bf       	out	0x32, r24	; 50
				break;
 76a:	02 c0       	rjmp	.+4      	; 0x770 <__vector_5+0x56>
		case  freq500 : TCNT0 = 131 ;
 76c:	83 e8       	ldi	r24, 0x83	; 131
 76e:	82 bf       	out	0x32, r24	; 50
				break;
		
	}
	
	
 770:	ff 91       	pop	r31
 772:	ef 91       	pop	r30
 774:	bf 91       	pop	r27
 776:	af 91       	pop	r26
 778:	9f 91       	pop	r25
 77a:	8f 91       	pop	r24
 77c:	7f 91       	pop	r23
 77e:	6f 91       	pop	r22
 780:	5f 91       	pop	r21
 782:	4f 91       	pop	r20
 784:	3f 91       	pop	r19
 786:	2f 91       	pop	r18
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <calculate>:
	timer2DelayMs(60);
	
	 return Distance ;
}

uint16_t calculate(){
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
	
	uint8_t * no_of_ticks ;
	uint16_t timerOfTicks_Us  ;
	uint16_t Distance ;
	SwICU_Read(no_of_ticks);
 796:	c0 e0       	ldi	r28, 0x00	; 0
 798:	d0 e0       	ldi	r29, 0x00	; 0
 79a:	ce 01       	movw	r24, r28
 79c:	0e 94 30 02 	call	0x460	; 0x460 <SwICU_Read>
	
	timerOfTicks_Us = *no_of_ticks * tickTimeUs ;
	
	Distance = timerOfTicks_Us/58 ;
 7a0:	28 81       	ld	r18, Y
 7a2:	80 e1       	ldi	r24, 0x10	; 16
 7a4:	28 9f       	mul	r18, r24
 7a6:	90 01       	movw	r18, r0
 7a8:	11 24       	eor	r1, r1
 7aa:	af e9       	ldi	r26, 0x9F	; 159
 7ac:	b6 e4       	ldi	r27, 0x46	; 70
 7ae:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__umulhisi3>
 7b2:	92 95       	swap	r25
 7b4:	82 95       	swap	r24
 7b6:	8f 70       	andi	r24, 0x0F	; 15
 7b8:	89 27       	eor	r24, r25
 7ba:	9f 70       	andi	r25, 0x0F	; 15
 7bc:	89 27       	eor	r24, r25
	if (Distance > 15 ){
		Distance = 15 ;
	}
	//Distance = 3 ; 
	return Distance;
 7be:	80 31       	cpi	r24, 0x10	; 16
 7c0:	91 05       	cpc	r25, r1
 7c2:	10 f0       	brcs	.+4      	; 0x7c8 <calculate+0x36>
 7c4:	8f e0       	ldi	r24, 0x0F	; 15
 7c6:	90 e0       	ldi	r25, 0x00	; 0
	
	// microsec/58 = cm
	
	
	
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	08 95       	ret

000007ce <ultrasonic_init>:

#include "SwICU.h"
#include "Ultrasonic.h"
#define  tickTimeUs 16

uint16_t ultrasonic_init(){
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
	
	uint16_t Distance ;
	//trigger
	gpioPinWrite(GPIOC , BIT0 , 1);
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	61 e0       	ldi	r22, 0x01	; 1
 7d6:	82 e0       	ldi	r24, 0x02	; 2
 7d8:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	
	timer2DelayMs(5);
 7dc:	85 e0       	ldi	r24, 0x05	; 5
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 37 03 	call	0x66e	; 0x66e <timer2DelayMs>
	
	gpioPinWrite(GPIOC , BIT0 , 0);
 7e4:	40 e0       	ldi	r20, 0x00	; 0
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	82 e0       	ldi	r24, 0x02	; 2
 7ea:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	
	
	
	//Distance = 15 ;
	
	Distance = calculate() ;
 7ee:	0e 94 c9 03 	call	0x792	; 0x792 <calculate>
 7f2:	c8 2f       	mov	r28, r24
 7f4:	d9 2f       	mov	r29, r25
	
	gpioPinWrite(GPIOB , BIT4|BIT5|BIT6|BIT7 , Distance<<4) ;
 7f6:	48 2f       	mov	r20, r24
 7f8:	42 95       	swap	r20
 7fa:	40 7f       	andi	r20, 0xF0	; 240
 7fc:	60 ef       	ldi	r22, 0xF0	; 240
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	0e 94 29 01 	call	0x252	; 0x252 <gpioPinWrite>
	
	timer2DelayMs(60);
 804:	8c e3       	ldi	r24, 0x3C	; 60
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 37 03 	call	0x66e	; 0x66e <timer2DelayMs>
	
	 return Distance ;
}
 80c:	8c 2f       	mov	r24, r28
 80e:	9d 2f       	mov	r25, r29
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	08 95       	ret

00000816 <__divsf3>:
 816:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3x>
 81a:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_round>
 81e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fp_pscB>
 822:	58 f0       	brcs	.+22     	; 0x83a <__divsf3+0x24>
 824:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_pscA>
 828:	40 f0       	brcs	.+16     	; 0x83a <__divsf3+0x24>
 82a:	29 f4       	brne	.+10     	; 0x836 <__divsf3+0x20>
 82c:	5f 3f       	cpi	r21, 0xFF	; 255
 82e:	29 f0       	breq	.+10     	; 0x83a <__divsf3+0x24>
 830:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 834:	51 11       	cpse	r21, r1
 836:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_szero>
 83a:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_nan>

0000083e <__divsf3x>:
 83e:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_split3>
 842:	68 f3       	brcs	.-38     	; 0x81e <__divsf3+0x8>

00000844 <__divsf3_pse>:
 844:	99 23       	and	r25, r25
 846:	b1 f3       	breq	.-20     	; 0x834 <__divsf3+0x1e>
 848:	55 23       	and	r21, r21
 84a:	91 f3       	breq	.-28     	; 0x830 <__divsf3+0x1a>
 84c:	95 1b       	sub	r25, r21
 84e:	55 0b       	sbc	r21, r21
 850:	bb 27       	eor	r27, r27
 852:	aa 27       	eor	r26, r26
 854:	62 17       	cp	r22, r18
 856:	73 07       	cpc	r23, r19
 858:	84 07       	cpc	r24, r20
 85a:	38 f0       	brcs	.+14     	; 0x86a <__stack+0xb>
 85c:	9f 5f       	subi	r25, 0xFF	; 255
 85e:	5f 4f       	sbci	r21, 0xFF	; 255
 860:	22 0f       	add	r18, r18
 862:	33 1f       	adc	r19, r19
 864:	44 1f       	adc	r20, r20
 866:	aa 1f       	adc	r26, r26
 868:	a9 f3       	breq	.-22     	; 0x854 <__divsf3_pse+0x10>
 86a:	35 d0       	rcall	.+106    	; 0x8d6 <__stack+0x77>
 86c:	0e 2e       	mov	r0, r30
 86e:	3a f0       	brmi	.+14     	; 0x87e <__stack+0x1f>
 870:	e0 e8       	ldi	r30, 0x80	; 128
 872:	32 d0       	rcall	.+100    	; 0x8d8 <__stack+0x79>
 874:	91 50       	subi	r25, 0x01	; 1
 876:	50 40       	sbci	r21, 0x00	; 0
 878:	e6 95       	lsr	r30
 87a:	00 1c       	adc	r0, r0
 87c:	ca f7       	brpl	.-14     	; 0x870 <__stack+0x11>
 87e:	2b d0       	rcall	.+86     	; 0x8d6 <__stack+0x77>
 880:	fe 2f       	mov	r31, r30
 882:	29 d0       	rcall	.+82     	; 0x8d6 <__stack+0x77>
 884:	66 0f       	add	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	bb 1f       	adc	r27, r27
 88c:	26 17       	cp	r18, r22
 88e:	37 07       	cpc	r19, r23
 890:	48 07       	cpc	r20, r24
 892:	ab 07       	cpc	r26, r27
 894:	b0 e8       	ldi	r27, 0x80	; 128
 896:	09 f0       	breq	.+2      	; 0x89a <__stack+0x3b>
 898:	bb 0b       	sbc	r27, r27
 89a:	80 2d       	mov	r24, r0
 89c:	bf 01       	movw	r22, r30
 89e:	ff 27       	eor	r31, r31
 8a0:	93 58       	subi	r25, 0x83	; 131
 8a2:	5f 4f       	sbci	r21, 0xFF	; 255
 8a4:	3a f0       	brmi	.+14     	; 0x8b4 <__stack+0x55>
 8a6:	9e 3f       	cpi	r25, 0xFE	; 254
 8a8:	51 05       	cpc	r21, r1
 8aa:	78 f0       	brcs	.+30     	; 0x8ca <__stack+0x6b>
 8ac:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 8b0:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_szero>
 8b4:	5f 3f       	cpi	r21, 0xFF	; 255
 8b6:	e4 f3       	brlt	.-8      	; 0x8b0 <__stack+0x51>
 8b8:	98 3e       	cpi	r25, 0xE8	; 232
 8ba:	d4 f3       	brlt	.-12     	; 0x8b0 <__stack+0x51>
 8bc:	86 95       	lsr	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	b7 95       	ror	r27
 8c4:	f7 95       	ror	r31
 8c6:	9f 5f       	subi	r25, 0xFF	; 255
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__stack+0x5d>
 8ca:	88 0f       	add	r24, r24
 8cc:	91 1d       	adc	r25, r1
 8ce:	96 95       	lsr	r25
 8d0:	87 95       	ror	r24
 8d2:	97 f9       	bld	r25, 7
 8d4:	08 95       	ret
 8d6:	e1 e0       	ldi	r30, 0x01	; 1
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	bb 1f       	adc	r27, r27
 8e0:	62 17       	cp	r22, r18
 8e2:	73 07       	cpc	r23, r19
 8e4:	84 07       	cpc	r24, r20
 8e6:	ba 07       	cpc	r27, r26
 8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__stack+0x93>
 8ea:	62 1b       	sub	r22, r18
 8ec:	73 0b       	sbc	r23, r19
 8ee:	84 0b       	sbc	r24, r20
 8f0:	ba 0b       	sbc	r27, r26
 8f2:	ee 1f       	adc	r30, r30
 8f4:	88 f7       	brcc	.-30     	; 0x8d8 <__stack+0x79>
 8f6:	e0 95       	com	r30
 8f8:	08 95       	ret

000008fa <__fixunssfsi>:
 8fa:	0e 94 19 05 	call	0xa32	; 0xa32 <__fp_splitA>
 8fe:	88 f0       	brcs	.+34     	; 0x922 <__fixunssfsi+0x28>
 900:	9f 57       	subi	r25, 0x7F	; 127
 902:	98 f0       	brcs	.+38     	; 0x92a <__fixunssfsi+0x30>
 904:	b9 2f       	mov	r27, r25
 906:	99 27       	eor	r25, r25
 908:	b7 51       	subi	r27, 0x17	; 23
 90a:	b0 f0       	brcs	.+44     	; 0x938 <__fixunssfsi+0x3e>
 90c:	e1 f0       	breq	.+56     	; 0x946 <__fixunssfsi+0x4c>
 90e:	66 0f       	add	r22, r22
 910:	77 1f       	adc	r23, r23
 912:	88 1f       	adc	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	1a f0       	brmi	.+6      	; 0x91e <__fixunssfsi+0x24>
 918:	ba 95       	dec	r27
 91a:	c9 f7       	brne	.-14     	; 0x90e <__fixunssfsi+0x14>
 91c:	14 c0       	rjmp	.+40     	; 0x946 <__fixunssfsi+0x4c>
 91e:	b1 30       	cpi	r27, 0x01	; 1
 920:	91 f0       	breq	.+36     	; 0x946 <__fixunssfsi+0x4c>
 922:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_zero>
 926:	b1 e0       	ldi	r27, 0x01	; 1
 928:	08 95       	ret
 92a:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_zero>
 92e:	67 2f       	mov	r22, r23
 930:	78 2f       	mov	r23, r24
 932:	88 27       	eor	r24, r24
 934:	b8 5f       	subi	r27, 0xF8	; 248
 936:	39 f0       	breq	.+14     	; 0x946 <__fixunssfsi+0x4c>
 938:	b9 3f       	cpi	r27, 0xF9	; 249
 93a:	cc f3       	brlt	.-14     	; 0x92e <__fixunssfsi+0x34>
 93c:	86 95       	lsr	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b3 95       	inc	r27
 944:	d9 f7       	brne	.-10     	; 0x93c <__fixunssfsi+0x42>
 946:	3e f4       	brtc	.+14     	; 0x956 <__fixunssfsi+0x5c>
 948:	90 95       	com	r25
 94a:	80 95       	com	r24
 94c:	70 95       	com	r23
 94e:	61 95       	neg	r22
 950:	7f 4f       	sbci	r23, 0xFF	; 255
 952:	8f 4f       	sbci	r24, 0xFF	; 255
 954:	9f 4f       	sbci	r25, 0xFF	; 255
 956:	08 95       	ret

00000958 <__floatunsisf>:
 958:	e8 94       	clt
 95a:	09 c0       	rjmp	.+18     	; 0x96e <__floatsisf+0x12>

0000095c <__floatsisf>:
 95c:	97 fb       	bst	r25, 7
 95e:	3e f4       	brtc	.+14     	; 0x96e <__floatsisf+0x12>
 960:	90 95       	com	r25
 962:	80 95       	com	r24
 964:	70 95       	com	r23
 966:	61 95       	neg	r22
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	99 23       	and	r25, r25
 970:	a9 f0       	breq	.+42     	; 0x99c <__floatsisf+0x40>
 972:	f9 2f       	mov	r31, r25
 974:	96 e9       	ldi	r25, 0x96	; 150
 976:	bb 27       	eor	r27, r27
 978:	93 95       	inc	r25
 97a:	f6 95       	lsr	r31
 97c:	87 95       	ror	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f1 11       	cpse	r31, r1
 986:	f8 cf       	rjmp	.-16     	; 0x978 <__floatsisf+0x1c>
 988:	fa f4       	brpl	.+62     	; 0x9c8 <__floatsisf+0x6c>
 98a:	bb 0f       	add	r27, r27
 98c:	11 f4       	brne	.+4      	; 0x992 <__floatsisf+0x36>
 98e:	60 ff       	sbrs	r22, 0
 990:	1b c0       	rjmp	.+54     	; 0x9c8 <__floatsisf+0x6c>
 992:	6f 5f       	subi	r22, 0xFF	; 255
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	16 c0       	rjmp	.+44     	; 0x9c8 <__floatsisf+0x6c>
 99c:	88 23       	and	r24, r24
 99e:	11 f0       	breq	.+4      	; 0x9a4 <__floatsisf+0x48>
 9a0:	96 e9       	ldi	r25, 0x96	; 150
 9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <__floatsisf+0x6a>
 9a4:	77 23       	and	r23, r23
 9a6:	21 f0       	breq	.+8      	; 0x9b0 <__floatsisf+0x54>
 9a8:	9e e8       	ldi	r25, 0x8E	; 142
 9aa:	87 2f       	mov	r24, r23
 9ac:	76 2f       	mov	r23, r22
 9ae:	05 c0       	rjmp	.+10     	; 0x9ba <__floatsisf+0x5e>
 9b0:	66 23       	and	r22, r22
 9b2:	71 f0       	breq	.+28     	; 0x9d0 <__floatsisf+0x74>
 9b4:	96 e8       	ldi	r25, 0x86	; 134
 9b6:	86 2f       	mov	r24, r22
 9b8:	70 e0       	ldi	r23, 0x00	; 0
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	2a f0       	brmi	.+10     	; 0x9c8 <__floatsisf+0x6c>
 9be:	9a 95       	dec	r25
 9c0:	66 0f       	add	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	88 1f       	adc	r24, r24
 9c6:	da f7       	brpl	.-10     	; 0x9be <__floatsisf+0x62>
 9c8:	88 0f       	add	r24, r24
 9ca:	96 95       	lsr	r25
 9cc:	87 95       	ror	r24
 9ce:	97 f9       	bld	r25, 7
 9d0:	08 95       	ret

000009d2 <__fp_inf>:
 9d2:	97 f9       	bld	r25, 7
 9d4:	9f 67       	ori	r25, 0x7F	; 127
 9d6:	80 e8       	ldi	r24, 0x80	; 128
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	08 95       	ret

000009de <__fp_nan>:
 9de:	9f ef       	ldi	r25, 0xFF	; 255
 9e0:	80 ec       	ldi	r24, 0xC0	; 192
 9e2:	08 95       	ret

000009e4 <__fp_pscA>:
 9e4:	00 24       	eor	r0, r0
 9e6:	0a 94       	dec	r0
 9e8:	16 16       	cp	r1, r22
 9ea:	17 06       	cpc	r1, r23
 9ec:	18 06       	cpc	r1, r24
 9ee:	09 06       	cpc	r0, r25
 9f0:	08 95       	ret

000009f2 <__fp_pscB>:
 9f2:	00 24       	eor	r0, r0
 9f4:	0a 94       	dec	r0
 9f6:	12 16       	cp	r1, r18
 9f8:	13 06       	cpc	r1, r19
 9fa:	14 06       	cpc	r1, r20
 9fc:	05 06       	cpc	r0, r21
 9fe:	08 95       	ret

00000a00 <__fp_round>:
 a00:	09 2e       	mov	r0, r25
 a02:	03 94       	inc	r0
 a04:	00 0c       	add	r0, r0
 a06:	11 f4       	brne	.+4      	; 0xa0c <__fp_round+0xc>
 a08:	88 23       	and	r24, r24
 a0a:	52 f0       	brmi	.+20     	; 0xa20 <__fp_round+0x20>
 a0c:	bb 0f       	add	r27, r27
 a0e:	40 f4       	brcc	.+16     	; 0xa20 <__fp_round+0x20>
 a10:	bf 2b       	or	r27, r31
 a12:	11 f4       	brne	.+4      	; 0xa18 <__fp_round+0x18>
 a14:	60 ff       	sbrs	r22, 0
 a16:	04 c0       	rjmp	.+8      	; 0xa20 <__fp_round+0x20>
 a18:	6f 5f       	subi	r22, 0xFF	; 255
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	8f 4f       	sbci	r24, 0xFF	; 255
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	08 95       	ret

00000a22 <__fp_split3>:
 a22:	57 fd       	sbrc	r21, 7
 a24:	90 58       	subi	r25, 0x80	; 128
 a26:	44 0f       	add	r20, r20
 a28:	55 1f       	adc	r21, r21
 a2a:	59 f0       	breq	.+22     	; 0xa42 <__fp_splitA+0x10>
 a2c:	5f 3f       	cpi	r21, 0xFF	; 255
 a2e:	71 f0       	breq	.+28     	; 0xa4c <__fp_splitA+0x1a>
 a30:	47 95       	ror	r20

00000a32 <__fp_splitA>:
 a32:	88 0f       	add	r24, r24
 a34:	97 fb       	bst	r25, 7
 a36:	99 1f       	adc	r25, r25
 a38:	61 f0       	breq	.+24     	; 0xa52 <__fp_splitA+0x20>
 a3a:	9f 3f       	cpi	r25, 0xFF	; 255
 a3c:	79 f0       	breq	.+30     	; 0xa5c <__fp_splitA+0x2a>
 a3e:	87 95       	ror	r24
 a40:	08 95       	ret
 a42:	12 16       	cp	r1, r18
 a44:	13 06       	cpc	r1, r19
 a46:	14 06       	cpc	r1, r20
 a48:	55 1f       	adc	r21, r21
 a4a:	f2 cf       	rjmp	.-28     	; 0xa30 <__fp_split3+0xe>
 a4c:	46 95       	lsr	r20
 a4e:	f1 df       	rcall	.-30     	; 0xa32 <__fp_splitA>
 a50:	08 c0       	rjmp	.+16     	; 0xa62 <__fp_splitA+0x30>
 a52:	16 16       	cp	r1, r22
 a54:	17 06       	cpc	r1, r23
 a56:	18 06       	cpc	r1, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	f1 cf       	rjmp	.-30     	; 0xa3e <__fp_splitA+0xc>
 a5c:	86 95       	lsr	r24
 a5e:	71 05       	cpc	r23, r1
 a60:	61 05       	cpc	r22, r1
 a62:	08 94       	sec
 a64:	08 95       	ret

00000a66 <__fp_zero>:
 a66:	e8 94       	clt

00000a68 <__fp_szero>:
 a68:	bb 27       	eor	r27, r27
 a6a:	66 27       	eor	r22, r22
 a6c:	77 27       	eor	r23, r23
 a6e:	cb 01       	movw	r24, r22
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret

00000a74 <__mulsf3>:
 a74:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__mulsf3x>
 a78:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_round>
 a7c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_pscA>
 a80:	38 f0       	brcs	.+14     	; 0xa90 <__mulsf3+0x1c>
 a82:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fp_pscB>
 a86:	20 f0       	brcs	.+8      	; 0xa90 <__mulsf3+0x1c>
 a88:	95 23       	and	r25, r21
 a8a:	11 f0       	breq	.+4      	; 0xa90 <__mulsf3+0x1c>
 a8c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 a90:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_nan>
 a94:	11 24       	eor	r1, r1
 a96:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_szero>

00000a9a <__mulsf3x>:
 a9a:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_split3>
 a9e:	70 f3       	brcs	.-36     	; 0xa7c <__mulsf3+0x8>

00000aa0 <__mulsf3_pse>:
 aa0:	95 9f       	mul	r25, r21
 aa2:	c1 f3       	breq	.-16     	; 0xa94 <__mulsf3+0x20>
 aa4:	95 0f       	add	r25, r21
 aa6:	50 e0       	ldi	r21, 0x00	; 0
 aa8:	55 1f       	adc	r21, r21
 aaa:	62 9f       	mul	r22, r18
 aac:	f0 01       	movw	r30, r0
 aae:	72 9f       	mul	r23, r18
 ab0:	bb 27       	eor	r27, r27
 ab2:	f0 0d       	add	r31, r0
 ab4:	b1 1d       	adc	r27, r1
 ab6:	63 9f       	mul	r22, r19
 ab8:	aa 27       	eor	r26, r26
 aba:	f0 0d       	add	r31, r0
 abc:	b1 1d       	adc	r27, r1
 abe:	aa 1f       	adc	r26, r26
 ac0:	64 9f       	mul	r22, r20
 ac2:	66 27       	eor	r22, r22
 ac4:	b0 0d       	add	r27, r0
 ac6:	a1 1d       	adc	r26, r1
 ac8:	66 1f       	adc	r22, r22
 aca:	82 9f       	mul	r24, r18
 acc:	22 27       	eor	r18, r18
 ace:	b0 0d       	add	r27, r0
 ad0:	a1 1d       	adc	r26, r1
 ad2:	62 1f       	adc	r22, r18
 ad4:	73 9f       	mul	r23, r19
 ad6:	b0 0d       	add	r27, r0
 ad8:	a1 1d       	adc	r26, r1
 ada:	62 1f       	adc	r22, r18
 adc:	83 9f       	mul	r24, r19
 ade:	a0 0d       	add	r26, r0
 ae0:	61 1d       	adc	r22, r1
 ae2:	22 1f       	adc	r18, r18
 ae4:	74 9f       	mul	r23, r20
 ae6:	33 27       	eor	r19, r19
 ae8:	a0 0d       	add	r26, r0
 aea:	61 1d       	adc	r22, r1
 aec:	23 1f       	adc	r18, r19
 aee:	84 9f       	mul	r24, r20
 af0:	60 0d       	add	r22, r0
 af2:	21 1d       	adc	r18, r1
 af4:	82 2f       	mov	r24, r18
 af6:	76 2f       	mov	r23, r22
 af8:	6a 2f       	mov	r22, r26
 afa:	11 24       	eor	r1, r1
 afc:	9f 57       	subi	r25, 0x7F	; 127
 afe:	50 40       	sbci	r21, 0x00	; 0
 b00:	9a f0       	brmi	.+38     	; 0xb28 <__mulsf3_pse+0x88>
 b02:	f1 f0       	breq	.+60     	; 0xb40 <__mulsf3_pse+0xa0>
 b04:	88 23       	and	r24, r24
 b06:	4a f0       	brmi	.+18     	; 0xb1a <__mulsf3_pse+0x7a>
 b08:	ee 0f       	add	r30, r30
 b0a:	ff 1f       	adc	r31, r31
 b0c:	bb 1f       	adc	r27, r27
 b0e:	66 1f       	adc	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	91 50       	subi	r25, 0x01	; 1
 b16:	50 40       	sbci	r21, 0x00	; 0
 b18:	a9 f7       	brne	.-22     	; 0xb04 <__mulsf3_pse+0x64>
 b1a:	9e 3f       	cpi	r25, 0xFE	; 254
 b1c:	51 05       	cpc	r21, r1
 b1e:	80 f0       	brcs	.+32     	; 0xb40 <__mulsf3_pse+0xa0>
 b20:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 b24:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_szero>
 b28:	5f 3f       	cpi	r21, 0xFF	; 255
 b2a:	e4 f3       	brlt	.-8      	; 0xb24 <__mulsf3_pse+0x84>
 b2c:	98 3e       	cpi	r25, 0xE8	; 232
 b2e:	d4 f3       	brlt	.-12     	; 0xb24 <__mulsf3_pse+0x84>
 b30:	86 95       	lsr	r24
 b32:	77 95       	ror	r23
 b34:	67 95       	ror	r22
 b36:	b7 95       	ror	r27
 b38:	f7 95       	ror	r31
 b3a:	e7 95       	ror	r30
 b3c:	9f 5f       	subi	r25, 0xFF	; 255
 b3e:	c1 f7       	brne	.-16     	; 0xb30 <__mulsf3_pse+0x90>
 b40:	fe 2b       	or	r31, r30
 b42:	88 0f       	add	r24, r24
 b44:	91 1d       	adc	r25, r1
 b46:	96 95       	lsr	r25
 b48:	87 95       	ror	r24
 b4a:	97 f9       	bld	r25, 7
 b4c:	08 95       	ret

00000b4e <__umulhisi3>:
 b4e:	a2 9f       	mul	r26, r18
 b50:	b0 01       	movw	r22, r0
 b52:	b3 9f       	mul	r27, r19
 b54:	c0 01       	movw	r24, r0
 b56:	a3 9f       	mul	r26, r19
 b58:	70 0d       	add	r23, r0
 b5a:	81 1d       	adc	r24, r1
 b5c:	11 24       	eor	r1, r1
 b5e:	91 1d       	adc	r25, r1
 b60:	b2 9f       	mul	r27, r18
 b62:	70 0d       	add	r23, r0
 b64:	81 1d       	adc	r24, r1
 b66:	11 24       	eor	r1, r1
 b68:	91 1d       	adc	r25, r1
 b6a:	08 95       	ret

00000b6c <_exit>:
 b6c:	f8 94       	cli

00000b6e <__stop_program>:
 b6e:	ff cf       	rjmp	.-2      	; 0xb6e <__stop_program>
